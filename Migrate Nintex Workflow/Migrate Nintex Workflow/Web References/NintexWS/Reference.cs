//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Migrate_Nintex_Workflow.NintexWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="NintexWorkflowWSSoap", Namespace="http://nintex.com")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NWContextKey))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WorkflowLog[]))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ActivityLogInfo[]))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NWContextData[]))]
    public partial class NintexWorkflowWS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback WorkflowFormProductSelectedOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckInFormsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveWorkflowOperationCompleted;
        
        private System.Threading.SendOrPostCallback WorkflowExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SnippetExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback TemplateExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveSnippetOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveTemplate2OperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishWorkflowOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminateWorkflowOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminateWorkflowByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback TerminateWorkflowByNameForListItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckGlobalReuseStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteWorkflowOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSnippetOperationCompleted;
        
        private System.Threading.SendOrPostCallback HideTaskForApproverOperationCompleted;
        
        private System.Threading.SendOrPostCallback HideWorkflowOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartWorkflowOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartWorkflowOnListItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartSiteWorkflowOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetItemsPendingMyApprovalOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRunningWorkflowTasksForCurrentUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRunningWorkflowTasksForCurrentUserForListItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRunningWorkflowTasksOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRunningWorkflowTasksForListItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRunningWorkflowTasksCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessTaskResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessTaskResponse2OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessTaskResponse3OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessFlexiTaskResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessFlexiTaskResponse2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOutcomesForFlexiTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelegateTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorkflowHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorkflowHistoryForListItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryForMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishFromNWFXmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishFromNWFXmlSkipValidationOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishFromNWFXmlNoOverwriteOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishFromNWFXmlSkipValidationNoOverwriteOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishFromNWFOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishFromNWFNoOverwriteOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishFromNWFSkipValidationOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishFromNWFSkipValidationNoOverwriteOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveFromNWFXmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveFromNWFXmlNoOverwriteOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveFromNWFOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveFromNWFNoOverwriteOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddWorkflowScheduleOnListItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddWorkflowScheduleOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveWorkflowScheduleOnListItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveWorkflowScheduleOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelegateAllTasksOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddLongTermDelegationRuleOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteLongTermDelegationRuleOperationCompleted;
        
        private System.Threading.SendOrPostCallback FixWorkflowsInSiteFromTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExportWorkflowOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaskStubsForCurrentUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaskDetailsUsingStubOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessTaskResponseUsingTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFoldersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListContentTypesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public NintexWorkflowWS() {
            this.Url = global::Migrate_Nintex_Workflow.Properties.Settings.Default.Migrate_Nintex_Workflow_NintexWS_NintexWorkflowWS;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event WorkflowFormProductSelectedCompletedEventHandler WorkflowFormProductSelectedCompleted;
        
        /// <remarks/>
        public event CheckInFormsCompletedEventHandler CheckInFormsCompleted;
        
        /// <remarks/>
        public event SaveWorkflowCompletedEventHandler SaveWorkflowCompleted;
        
        /// <remarks/>
        public event WorkflowExistsCompletedEventHandler WorkflowExistsCompleted;
        
        /// <remarks/>
        public event SnippetExistsCompletedEventHandler SnippetExistsCompleted;
        
        /// <remarks/>
        public event TemplateExistsCompletedEventHandler TemplateExistsCompleted;
        
        /// <remarks/>
        public event SaveSnippetCompletedEventHandler SaveSnippetCompleted;
        
        /// <remarks/>
        public event SaveTemplateCompletedEventHandler SaveTemplateCompleted;
        
        /// <remarks/>
        public event SaveTemplate2CompletedEventHandler SaveTemplate2Completed;
        
        /// <remarks/>
        public event PublishWorkflowCompletedEventHandler PublishWorkflowCompleted;
        
        /// <remarks/>
        public event TerminateWorkflowCompletedEventHandler TerminateWorkflowCompleted;
        
        /// <remarks/>
        public event TerminateWorkflowByNameCompletedEventHandler TerminateWorkflowByNameCompleted;
        
        /// <remarks/>
        public event TerminateWorkflowByNameForListItemCompletedEventHandler TerminateWorkflowByNameForListItemCompleted;
        
        /// <remarks/>
        public event CheckGlobalReuseStatusCompletedEventHandler CheckGlobalReuseStatusCompleted;
        
        /// <remarks/>
        public event DeleteWorkflowCompletedEventHandler DeleteWorkflowCompleted;
        
        /// <remarks/>
        public event DeleteSnippetCompletedEventHandler DeleteSnippetCompleted;
        
        /// <remarks/>
        public event HideTaskForApproverCompletedEventHandler HideTaskForApproverCompleted;
        
        /// <remarks/>
        public event HideWorkflowCompletedEventHandler HideWorkflowCompleted;
        
        /// <remarks/>
        public event StartWorkflowCompletedEventHandler StartWorkflowCompleted;
        
        /// <remarks/>
        public event StartWorkflowOnListItemCompletedEventHandler StartWorkflowOnListItemCompleted;
        
        /// <remarks/>
        public event StartSiteWorkflowCompletedEventHandler StartSiteWorkflowCompleted;
        
        /// <remarks/>
        public event GetItemsPendingMyApprovalCompletedEventHandler GetItemsPendingMyApprovalCompleted;
        
        /// <remarks/>
        public event GetRunningWorkflowTasksForCurrentUserCompletedEventHandler GetRunningWorkflowTasksForCurrentUserCompleted;
        
        /// <remarks/>
        public event GetRunningWorkflowTasksForCurrentUserForListItemCompletedEventHandler GetRunningWorkflowTasksForCurrentUserForListItemCompleted;
        
        /// <remarks/>
        public event GetRunningWorkflowTasksCompletedEventHandler GetRunningWorkflowTasksCompleted;
        
        /// <remarks/>
        public event GetRunningWorkflowTasksForListItemCompletedEventHandler GetRunningWorkflowTasksForListItemCompleted;
        
        /// <remarks/>
        public event GetRunningWorkflowTasksCollectionCompletedEventHandler GetRunningWorkflowTasksCollectionCompleted;
        
        /// <remarks/>
        public event ProcessTaskResponseCompletedEventHandler ProcessTaskResponseCompleted;
        
        /// <remarks/>
        public event ProcessTaskResponse2CompletedEventHandler ProcessTaskResponse2Completed;
        
        /// <remarks/>
        public event ProcessTaskResponse3CompletedEventHandler ProcessTaskResponse3Completed;
        
        /// <remarks/>
        public event ProcessFlexiTaskResponseCompletedEventHandler ProcessFlexiTaskResponseCompleted;
        
        /// <remarks/>
        public event ProcessFlexiTaskResponse2CompletedEventHandler ProcessFlexiTaskResponse2Completed;
        
        /// <remarks/>
        public event GetOutcomesForFlexiTaskCompletedEventHandler GetOutcomesForFlexiTaskCompleted;
        
        /// <remarks/>
        public event DelegateTaskCompletedEventHandler DelegateTaskCompleted;
        
        /// <remarks/>
        public event GetWorkflowHistoryCompletedEventHandler GetWorkflowHistoryCompleted;
        
        /// <remarks/>
        public event GetWorkflowHistoryForListItemCompletedEventHandler GetWorkflowHistoryForListItemCompleted;
        
        /// <remarks/>
        public event QueryForMessagesCompletedEventHandler QueryForMessagesCompleted;
        
        /// <remarks/>
        public event PublishFromNWFXmlCompletedEventHandler PublishFromNWFXmlCompleted;
        
        /// <remarks/>
        public event PublishFromNWFXmlSkipValidationCompletedEventHandler PublishFromNWFXmlSkipValidationCompleted;
        
        /// <remarks/>
        public event PublishFromNWFXmlNoOverwriteCompletedEventHandler PublishFromNWFXmlNoOverwriteCompleted;
        
        /// <remarks/>
        public event PublishFromNWFXmlSkipValidationNoOverwriteCompletedEventHandler PublishFromNWFXmlSkipValidationNoOverwriteCompleted;
        
        /// <remarks/>
        public event PublishFromNWFCompletedEventHandler PublishFromNWFCompleted;
        
        /// <remarks/>
        public event PublishFromNWFNoOverwriteCompletedEventHandler PublishFromNWFNoOverwriteCompleted;
        
        /// <remarks/>
        public event PublishFromNWFSkipValidationCompletedEventHandler PublishFromNWFSkipValidationCompleted;
        
        /// <remarks/>
        public event PublishFromNWFSkipValidationNoOverwriteCompletedEventHandler PublishFromNWFSkipValidationNoOverwriteCompleted;
        
        /// <remarks/>
        public event SaveFromNWFXmlCompletedEventHandler SaveFromNWFXmlCompleted;
        
        /// <remarks/>
        public event SaveFromNWFXmlNoOverwriteCompletedEventHandler SaveFromNWFXmlNoOverwriteCompleted;
        
        /// <remarks/>
        public event SaveFromNWFCompletedEventHandler SaveFromNWFCompleted;
        
        /// <remarks/>
        public event SaveFromNWFNoOverwriteCompletedEventHandler SaveFromNWFNoOverwriteCompleted;
        
        /// <remarks/>
        public event AddWorkflowScheduleOnListItemCompletedEventHandler AddWorkflowScheduleOnListItemCompleted;
        
        /// <remarks/>
        public event AddWorkflowScheduleCompletedEventHandler AddWorkflowScheduleCompleted;
        
        /// <remarks/>
        public event RemoveWorkflowScheduleOnListItemCompletedEventHandler RemoveWorkflowScheduleOnListItemCompleted;
        
        /// <remarks/>
        public event RemoveWorkflowScheduleCompletedEventHandler RemoveWorkflowScheduleCompleted;
        
        /// <remarks/>
        public event DelegateAllTasksCompletedEventHandler DelegateAllTasksCompleted;
        
        /// <remarks/>
        public event AddLongTermDelegationRuleCompletedEventHandler AddLongTermDelegationRuleCompleted;
        
        /// <remarks/>
        public event DeleteLongTermDelegationRuleCompletedEventHandler DeleteLongTermDelegationRuleCompleted;
        
        /// <remarks/>
        public event FixWorkflowsInSiteFromTemplateCompletedEventHandler FixWorkflowsInSiteFromTemplateCompleted;
        
        /// <remarks/>
        public event ExportWorkflowCompletedEventHandler ExportWorkflowCompleted;
        
        /// <remarks/>
        public event GetTaskStubsForCurrentUserCompletedEventHandler GetTaskStubsForCurrentUserCompleted;
        
        /// <remarks/>
        public event GetTaskDetailsUsingStubCompletedEventHandler GetTaskDetailsUsingStubCompleted;
        
        /// <remarks/>
        public event ProcessTaskResponseUsingTokenCompletedEventHandler ProcessTaskResponseUsingTokenCompleted;
        
        /// <remarks/>
        public event GetFoldersCompletedEventHandler GetFoldersCompleted;
        
        /// <remarks/>
        public event GetListContentTypesCompletedEventHandler GetListContentTypesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/WorkflowFormProductSelected", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string WorkflowFormProductSelected(string workflowConfiguration, string activityConfiguration, string product, string formType) {
            object[] results = this.Invoke("WorkflowFormProductSelected", new object[] {
                        workflowConfiguration,
                        activityConfiguration,
                        product,
                        formType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WorkflowFormProductSelectedAsync(string workflowConfiguration, string activityConfiguration, string product, string formType) {
            this.WorkflowFormProductSelectedAsync(workflowConfiguration, activityConfiguration, product, formType, null);
        }
        
        /// <remarks/>
        public void WorkflowFormProductSelectedAsync(string workflowConfiguration, string activityConfiguration, string product, string formType, object userState) {
            if ((this.WorkflowFormProductSelectedOperationCompleted == null)) {
                this.WorkflowFormProductSelectedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWorkflowFormProductSelectedOperationCompleted);
            }
            this.InvokeAsync("WorkflowFormProductSelected", new object[] {
                        workflowConfiguration,
                        activityConfiguration,
                        product,
                        formType}, this.WorkflowFormProductSelectedOperationCompleted, userState);
        }
        
        private void OnWorkflowFormProductSelectedOperationCompleted(object arg) {
            if ((this.WorkflowFormProductSelectedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WorkflowFormProductSelectedCompleted(this, new WorkflowFormProductSelectedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/CheckInForms", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckInForms(string workflowConfiguration, string activityConfiguration, string formType) {
            this.Invoke("CheckInForms", new object[] {
                        workflowConfiguration,
                        activityConfiguration,
                        formType});
        }
        
        /// <remarks/>
        public void CheckInFormsAsync(string workflowConfiguration, string activityConfiguration, string formType) {
            this.CheckInFormsAsync(workflowConfiguration, activityConfiguration, formType, null);
        }
        
        /// <remarks/>
        public void CheckInFormsAsync(string workflowConfiguration, string activityConfiguration, string formType, object userState) {
            if ((this.CheckInFormsOperationCompleted == null)) {
                this.CheckInFormsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckInFormsOperationCompleted);
            }
            this.InvokeAsync("CheckInForms", new object[] {
                        workflowConfiguration,
                        activityConfiguration,
                        formType}, this.CheckInFormsOperationCompleted, userState);
        }
        
        private void OnCheckInFormsOperationCompleted(object arg) {
            if ((this.CheckInFormsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckInFormsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/SaveWorkflow", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WorkflowMetaData SaveWorkflow(string wfName, string activityConfigs, System.Guid listId, string contentTypeId, string changeNotes) {
            object[] results = this.Invoke("SaveWorkflow", new object[] {
                        wfName,
                        activityConfigs,
                        listId,
                        contentTypeId,
                        changeNotes});
            return ((WorkflowMetaData)(results[0]));
        }
        
        /// <remarks/>
        public void SaveWorkflowAsync(string wfName, string activityConfigs, System.Guid listId, string contentTypeId, string changeNotes) {
            this.SaveWorkflowAsync(wfName, activityConfigs, listId, contentTypeId, changeNotes, null);
        }
        
        /// <remarks/>
        public void SaveWorkflowAsync(string wfName, string activityConfigs, System.Guid listId, string contentTypeId, string changeNotes, object userState) {
            if ((this.SaveWorkflowOperationCompleted == null)) {
                this.SaveWorkflowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveWorkflowOperationCompleted);
            }
            this.InvokeAsync("SaveWorkflow", new object[] {
                        wfName,
                        activityConfigs,
                        listId,
                        contentTypeId,
                        changeNotes}, this.SaveWorkflowOperationCompleted, userState);
        }
        
        private void OnSaveWorkflowOperationCompleted(object arg) {
            if ((this.SaveWorkflowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveWorkflowCompleted(this, new SaveWorkflowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/WorkflowExists", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NameInUseStatus WorkflowExists(string workflowName, System.Guid listId, string workflowType) {
            object[] results = this.Invoke("WorkflowExists", new object[] {
                        workflowName,
                        listId,
                        workflowType});
            return ((NameInUseStatus)(results[0]));
        }
        
        /// <remarks/>
        public void WorkflowExistsAsync(string workflowName, System.Guid listId, string workflowType) {
            this.WorkflowExistsAsync(workflowName, listId, workflowType, null);
        }
        
        /// <remarks/>
        public void WorkflowExistsAsync(string workflowName, System.Guid listId, string workflowType, object userState) {
            if ((this.WorkflowExistsOperationCompleted == null)) {
                this.WorkflowExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWorkflowExistsOperationCompleted);
            }
            this.InvokeAsync("WorkflowExists", new object[] {
                        workflowName,
                        listId,
                        workflowType}, this.WorkflowExistsOperationCompleted, userState);
        }
        
        private void OnWorkflowExistsOperationCompleted(object arg) {
            if ((this.WorkflowExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WorkflowExistsCompleted(this, new WorkflowExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/SnippetExists", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SnippetExists(string snippetName) {
            object[] results = this.Invoke("SnippetExists", new object[] {
                        snippetName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SnippetExistsAsync(string snippetName) {
            this.SnippetExistsAsync(snippetName, null);
        }
        
        /// <remarks/>
        public void SnippetExistsAsync(string snippetName, object userState) {
            if ((this.SnippetExistsOperationCompleted == null)) {
                this.SnippetExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSnippetExistsOperationCompleted);
            }
            this.InvokeAsync("SnippetExists", new object[] {
                        snippetName}, this.SnippetExistsOperationCompleted, userState);
        }
        
        private void OnSnippetExistsOperationCompleted(object arg) {
            if ((this.SnippetExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SnippetExistsCompleted(this, new SnippetExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/TemplateExists", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TemplateExists(string templateName) {
            object[] results = this.Invoke("TemplateExists", new object[] {
                        templateName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TemplateExistsAsync(string templateName) {
            this.TemplateExistsAsync(templateName, null);
        }
        
        /// <remarks/>
        public void TemplateExistsAsync(string templateName, object userState) {
            if ((this.TemplateExistsOperationCompleted == null)) {
                this.TemplateExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTemplateExistsOperationCompleted);
            }
            this.InvokeAsync("TemplateExists", new object[] {
                        templateName}, this.TemplateExistsOperationCompleted, userState);
        }
        
        private void OnTemplateExistsOperationCompleted(object arg) {
            if ((this.TemplateExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TemplateExistsCompleted(this, new TemplateExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/SaveSnippet", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveSnippet(string snippetName, string activityConfigs) {
            object[] results = this.Invoke("SaveSnippet", new object[] {
                        snippetName,
                        activityConfigs});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveSnippetAsync(string snippetName, string activityConfigs) {
            this.SaveSnippetAsync(snippetName, activityConfigs, null);
        }
        
        /// <remarks/>
        public void SaveSnippetAsync(string snippetName, string activityConfigs, object userState) {
            if ((this.SaveSnippetOperationCompleted == null)) {
                this.SaveSnippetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveSnippetOperationCompleted);
            }
            this.InvokeAsync("SaveSnippet", new object[] {
                        snippetName,
                        activityConfigs}, this.SaveSnippetOperationCompleted, userState);
        }
        
        private void OnSaveSnippetOperationCompleted(object arg) {
            if ((this.SaveSnippetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveSnippetCompleted(this, new SaveSnippetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/SaveTemplate", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveTemplate(string templateName, string templateDescription, string category, string activityConfigs) {
            this.Invoke("SaveTemplate", new object[] {
                        templateName,
                        templateDescription,
                        category,
                        activityConfigs});
        }
        
        /// <remarks/>
        public void SaveTemplateAsync(string templateName, string templateDescription, string category, string activityConfigs) {
            this.SaveTemplateAsync(templateName, templateDescription, category, activityConfigs, null);
        }
        
        /// <remarks/>
        public void SaveTemplateAsync(string templateName, string templateDescription, string category, string activityConfigs, object userState) {
            if ((this.SaveTemplateOperationCompleted == null)) {
                this.SaveTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveTemplateOperationCompleted);
            }
            this.InvokeAsync("SaveTemplate", new object[] {
                        templateName,
                        templateDescription,
                        category,
                        activityConfigs}, this.SaveTemplateOperationCompleted, userState);
        }
        
        private void OnSaveTemplateOperationCompleted(object arg) {
            if ((this.SaveTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveTemplateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/SaveTemplate2", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveTemplate2(string templateName, string templateDescription, string category, string activityConfigs, int lcid) {
            this.Invoke("SaveTemplate2", new object[] {
                        templateName,
                        templateDescription,
                        category,
                        activityConfigs,
                        lcid});
        }
        
        /// <remarks/>
        public void SaveTemplate2Async(string templateName, string templateDescription, string category, string activityConfigs, int lcid) {
            this.SaveTemplate2Async(templateName, templateDescription, category, activityConfigs, lcid, null);
        }
        
        /// <remarks/>
        public void SaveTemplate2Async(string templateName, string templateDescription, string category, string activityConfigs, int lcid, object userState) {
            if ((this.SaveTemplate2OperationCompleted == null)) {
                this.SaveTemplate2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveTemplate2OperationCompleted);
            }
            this.InvokeAsync("SaveTemplate2", new object[] {
                        templateName,
                        templateDescription,
                        category,
                        activityConfigs,
                        lcid}, this.SaveTemplate2OperationCompleted, userState);
        }
        
        private void OnSaveTemplate2OperationCompleted(object arg) {
            if ((this.SaveTemplate2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveTemplate2Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/PublishWorkflow", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WorkflowMetaData PublishWorkflow(string wfName, string activityConfigs, System.Guid listId, string contentTypeId, string changeNotes) {
            object[] results = this.Invoke("PublishWorkflow", new object[] {
                        wfName,
                        activityConfigs,
                        listId,
                        contentTypeId,
                        changeNotes});
            return ((WorkflowMetaData)(results[0]));
        }
        
        /// <remarks/>
        public void PublishWorkflowAsync(string wfName, string activityConfigs, System.Guid listId, string contentTypeId, string changeNotes) {
            this.PublishWorkflowAsync(wfName, activityConfigs, listId, contentTypeId, changeNotes, null);
        }
        
        /// <remarks/>
        public void PublishWorkflowAsync(string wfName, string activityConfigs, System.Guid listId, string contentTypeId, string changeNotes, object userState) {
            if ((this.PublishWorkflowOperationCompleted == null)) {
                this.PublishWorkflowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishWorkflowOperationCompleted);
            }
            this.InvokeAsync("PublishWorkflow", new object[] {
                        wfName,
                        activityConfigs,
                        listId,
                        contentTypeId,
                        changeNotes}, this.PublishWorkflowOperationCompleted, userState);
        }
        
        private void OnPublishWorkflowOperationCompleted(object arg) {
            if ((this.PublishWorkflowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishWorkflowCompleted(this, new PublishWorkflowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/TerminateWorkflow", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TerminateWorkflow(System.Guid listId, int itemId, System.Guid instanceId) {
            this.Invoke("TerminateWorkflow", new object[] {
                        listId,
                        itemId,
                        instanceId});
        }
        
        /// <remarks/>
        public void TerminateWorkflowAsync(System.Guid listId, int itemId, System.Guid instanceId) {
            this.TerminateWorkflowAsync(listId, itemId, instanceId, null);
        }
        
        /// <remarks/>
        public void TerminateWorkflowAsync(System.Guid listId, int itemId, System.Guid instanceId, object userState) {
            if ((this.TerminateWorkflowOperationCompleted == null)) {
                this.TerminateWorkflowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminateWorkflowOperationCompleted);
            }
            this.InvokeAsync("TerminateWorkflow", new object[] {
                        listId,
                        itemId,
                        instanceId}, this.TerminateWorkflowOperationCompleted, userState);
        }
        
        private void OnTerminateWorkflowOperationCompleted(object arg) {
            if ((this.TerminateWorkflowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminateWorkflowCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/TerminateWorkflowByName", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TerminateWorkflowByName(string fileUrl, string workflowName, bool terminatePreviousInstances) {
            this.Invoke("TerminateWorkflowByName", new object[] {
                        fileUrl,
                        workflowName,
                        terminatePreviousInstances});
        }
        
        /// <remarks/>
        public void TerminateWorkflowByNameAsync(string fileUrl, string workflowName, bool terminatePreviousInstances) {
            this.TerminateWorkflowByNameAsync(fileUrl, workflowName, terminatePreviousInstances, null);
        }
        
        /// <remarks/>
        public void TerminateWorkflowByNameAsync(string fileUrl, string workflowName, bool terminatePreviousInstances, object userState) {
            if ((this.TerminateWorkflowByNameOperationCompleted == null)) {
                this.TerminateWorkflowByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminateWorkflowByNameOperationCompleted);
            }
            this.InvokeAsync("TerminateWorkflowByName", new object[] {
                        fileUrl,
                        workflowName,
                        terminatePreviousInstances}, this.TerminateWorkflowByNameOperationCompleted, userState);
        }
        
        private void OnTerminateWorkflowByNameOperationCompleted(object arg) {
            if ((this.TerminateWorkflowByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminateWorkflowByNameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/TerminateWorkflowByNameForListItem", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TerminateWorkflowByNameForListItem(string listName, int itemId, string workflowName, bool terminatePreviousInstances) {
            this.Invoke("TerminateWorkflowByNameForListItem", new object[] {
                        listName,
                        itemId,
                        workflowName,
                        terminatePreviousInstances});
        }
        
        /// <remarks/>
        public void TerminateWorkflowByNameForListItemAsync(string listName, int itemId, string workflowName, bool terminatePreviousInstances) {
            this.TerminateWorkflowByNameForListItemAsync(listName, itemId, workflowName, terminatePreviousInstances, null);
        }
        
        /// <remarks/>
        public void TerminateWorkflowByNameForListItemAsync(string listName, int itemId, string workflowName, bool terminatePreviousInstances, object userState) {
            if ((this.TerminateWorkflowByNameForListItemOperationCompleted == null)) {
                this.TerminateWorkflowByNameForListItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTerminateWorkflowByNameForListItemOperationCompleted);
            }
            this.InvokeAsync("TerminateWorkflowByNameForListItem", new object[] {
                        listName,
                        itemId,
                        workflowName,
                        terminatePreviousInstances}, this.TerminateWorkflowByNameForListItemOperationCompleted, userState);
        }
        
        private void OnTerminateWorkflowByNameForListItemOperationCompleted(object arg) {
            if ((this.TerminateWorkflowByNameForListItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TerminateWorkflowByNameForListItemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/CheckGlobalReuseStatus", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckGlobalReuseStatus(string workflowName) {
            object[] results = this.Invoke("CheckGlobalReuseStatus", new object[] {
                        workflowName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckGlobalReuseStatusAsync(string workflowName) {
            this.CheckGlobalReuseStatusAsync(workflowName, null);
        }
        
        /// <remarks/>
        public void CheckGlobalReuseStatusAsync(string workflowName, object userState) {
            if ((this.CheckGlobalReuseStatusOperationCompleted == null)) {
                this.CheckGlobalReuseStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckGlobalReuseStatusOperationCompleted);
            }
            this.InvokeAsync("CheckGlobalReuseStatus", new object[] {
                        workflowName}, this.CheckGlobalReuseStatusOperationCompleted, userState);
        }
        
        private void OnCheckGlobalReuseStatusOperationCompleted(object arg) {
            if ((this.CheckGlobalReuseStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckGlobalReuseStatusCompleted(this, new CheckGlobalReuseStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/DeleteWorkflow", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteWorkflow(System.Guid listId, System.Guid workflowId, string workflowType) {
            this.Invoke("DeleteWorkflow", new object[] {
                        listId,
                        workflowId,
                        workflowType});
        }
        
        /// <remarks/>
        public void DeleteWorkflowAsync(System.Guid listId, System.Guid workflowId, string workflowType) {
            this.DeleteWorkflowAsync(listId, workflowId, workflowType, null);
        }
        
        /// <remarks/>
        public void DeleteWorkflowAsync(System.Guid listId, System.Guid workflowId, string workflowType, object userState) {
            if ((this.DeleteWorkflowOperationCompleted == null)) {
                this.DeleteWorkflowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteWorkflowOperationCompleted);
            }
            this.InvokeAsync("DeleteWorkflow", new object[] {
                        listId,
                        workflowId,
                        workflowType}, this.DeleteWorkflowOperationCompleted, userState);
        }
        
        private void OnDeleteWorkflowOperationCompleted(object arg) {
            if ((this.DeleteWorkflowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteWorkflowCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/DeleteSnippet", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteSnippet(System.Guid snippetId) {
            this.Invoke("DeleteSnippet", new object[] {
                        snippetId});
        }
        
        /// <remarks/>
        public void DeleteSnippetAsync(System.Guid snippetId) {
            this.DeleteSnippetAsync(snippetId, null);
        }
        
        /// <remarks/>
        public void DeleteSnippetAsync(System.Guid snippetId, object userState) {
            if ((this.DeleteSnippetOperationCompleted == null)) {
                this.DeleteSnippetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSnippetOperationCompleted);
            }
            this.InvokeAsync("DeleteSnippet", new object[] {
                        snippetId}, this.DeleteSnippetOperationCompleted, userState);
        }
        
        private void OnDeleteSnippetOperationCompleted(object arg) {
            if ((this.DeleteSnippetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSnippetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/HideTaskForApprover", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void HideTaskForApprover(long approverId, int contentDbId) {
            this.Invoke("HideTaskForApprover", new object[] {
                        approverId,
                        contentDbId});
        }
        
        /// <remarks/>
        public void HideTaskForApproverAsync(long approverId, int contentDbId) {
            this.HideTaskForApproverAsync(approverId, contentDbId, null);
        }
        
        /// <remarks/>
        public void HideTaskForApproverAsync(long approverId, int contentDbId, object userState) {
            if ((this.HideTaskForApproverOperationCompleted == null)) {
                this.HideTaskForApproverOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHideTaskForApproverOperationCompleted);
            }
            this.InvokeAsync("HideTaskForApprover", new object[] {
                        approverId,
                        contentDbId}, this.HideTaskForApproverOperationCompleted, userState);
        }
        
        private void OnHideTaskForApproverOperationCompleted(object arg) {
            if ((this.HideTaskForApproverCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HideTaskForApproverCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/HideWorkflow", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void HideWorkflow(System.Guid siteId, System.Guid instanceId) {
            this.Invoke("HideWorkflow", new object[] {
                        siteId,
                        instanceId});
        }
        
        /// <remarks/>
        public void HideWorkflowAsync(System.Guid siteId, System.Guid instanceId) {
            this.HideWorkflowAsync(siteId, instanceId, null);
        }
        
        /// <remarks/>
        public void HideWorkflowAsync(System.Guid siteId, System.Guid instanceId, object userState) {
            if ((this.HideWorkflowOperationCompleted == null)) {
                this.HideWorkflowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHideWorkflowOperationCompleted);
            }
            this.InvokeAsync("HideWorkflow", new object[] {
                        siteId,
                        instanceId}, this.HideWorkflowOperationCompleted, userState);
        }
        
        private void OnHideWorkflowOperationCompleted(object arg) {
            if ((this.HideWorkflowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HideWorkflowCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/StartWorkflow", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid StartWorkflow(string fileUrl, string workflowName, string associationData) {
            object[] results = this.Invoke("StartWorkflow", new object[] {
                        fileUrl,
                        workflowName,
                        associationData});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void StartWorkflowAsync(string fileUrl, string workflowName, string associationData) {
            this.StartWorkflowAsync(fileUrl, workflowName, associationData, null);
        }
        
        /// <remarks/>
        public void StartWorkflowAsync(string fileUrl, string workflowName, string associationData, object userState) {
            if ((this.StartWorkflowOperationCompleted == null)) {
                this.StartWorkflowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartWorkflowOperationCompleted);
            }
            this.InvokeAsync("StartWorkflow", new object[] {
                        fileUrl,
                        workflowName,
                        associationData}, this.StartWorkflowOperationCompleted, userState);
        }
        
        private void OnStartWorkflowOperationCompleted(object arg) {
            if ((this.StartWorkflowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartWorkflowCompleted(this, new StartWorkflowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/StartWorkflowOnListItem", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid StartWorkflowOnListItem(int itemId, string listName, string workflowName, string associationData) {
            object[] results = this.Invoke("StartWorkflowOnListItem", new object[] {
                        itemId,
                        listName,
                        workflowName,
                        associationData});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void StartWorkflowOnListItemAsync(int itemId, string listName, string workflowName, string associationData) {
            this.StartWorkflowOnListItemAsync(itemId, listName, workflowName, associationData, null);
        }
        
        /// <remarks/>
        public void StartWorkflowOnListItemAsync(int itemId, string listName, string workflowName, string associationData, object userState) {
            if ((this.StartWorkflowOnListItemOperationCompleted == null)) {
                this.StartWorkflowOnListItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartWorkflowOnListItemOperationCompleted);
            }
            this.InvokeAsync("StartWorkflowOnListItem", new object[] {
                        itemId,
                        listName,
                        workflowName,
                        associationData}, this.StartWorkflowOnListItemOperationCompleted, userState);
        }
        
        private void OnStartWorkflowOnListItemOperationCompleted(object arg) {
            if ((this.StartWorkflowOnListItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartWorkflowOnListItemCompleted(this, new StartWorkflowOnListItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/StartSiteWorkflow", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid StartSiteWorkflow(string workflowName, string associationData) {
            object[] results = this.Invoke("StartSiteWorkflow", new object[] {
                        workflowName,
                        associationData});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void StartSiteWorkflowAsync(string workflowName, string associationData) {
            this.StartSiteWorkflowAsync(workflowName, associationData, null);
        }
        
        /// <remarks/>
        public void StartSiteWorkflowAsync(string workflowName, string associationData, object userState) {
            if ((this.StartSiteWorkflowOperationCompleted == null)) {
                this.StartSiteWorkflowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartSiteWorkflowOperationCompleted);
            }
            this.InvokeAsync("StartSiteWorkflow", new object[] {
                        workflowName,
                        associationData}, this.StartSiteWorkflowOperationCompleted, userState);
        }
        
        private void OnStartSiteWorkflowOperationCompleted(object arg) {
            if ((this.StartSiteWorkflowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartSiteWorkflowCompleted(this, new StartSiteWorkflowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/GetItemsPendingMyApproval", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ItemsPendingApproval GetItemsPendingMyApproval(string uniquenessInfo) {
            object[] results = this.Invoke("GetItemsPendingMyApproval", new object[] {
                        uniquenessInfo});
            return ((ItemsPendingApproval)(results[0]));
        }
        
        /// <remarks/>
        public void GetItemsPendingMyApprovalAsync(string uniquenessInfo) {
            this.GetItemsPendingMyApprovalAsync(uniquenessInfo, null);
        }
        
        /// <remarks/>
        public void GetItemsPendingMyApprovalAsync(string uniquenessInfo, object userState) {
            if ((this.GetItemsPendingMyApprovalOperationCompleted == null)) {
                this.GetItemsPendingMyApprovalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetItemsPendingMyApprovalOperationCompleted);
            }
            this.InvokeAsync("GetItemsPendingMyApproval", new object[] {
                        uniquenessInfo}, this.GetItemsPendingMyApprovalOperationCompleted, userState);
        }
        
        private void OnGetItemsPendingMyApprovalOperationCompleted(object arg) {
            if ((this.GetItemsPendingMyApprovalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetItemsPendingMyApprovalCompleted(this, new GetItemsPendingMyApprovalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/GetRunningWorkflowTasksForCurrentUser", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserTask[] GetRunningWorkflowTasksForCurrentUser(string fileUrl) {
            object[] results = this.Invoke("GetRunningWorkflowTasksForCurrentUser", new object[] {
                        fileUrl});
            return ((UserTask[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRunningWorkflowTasksForCurrentUserAsync(string fileUrl) {
            this.GetRunningWorkflowTasksForCurrentUserAsync(fileUrl, null);
        }
        
        /// <remarks/>
        public void GetRunningWorkflowTasksForCurrentUserAsync(string fileUrl, object userState) {
            if ((this.GetRunningWorkflowTasksForCurrentUserOperationCompleted == null)) {
                this.GetRunningWorkflowTasksForCurrentUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRunningWorkflowTasksForCurrentUserOperationCompleted);
            }
            this.InvokeAsync("GetRunningWorkflowTasksForCurrentUser", new object[] {
                        fileUrl}, this.GetRunningWorkflowTasksForCurrentUserOperationCompleted, userState);
        }
        
        private void OnGetRunningWorkflowTasksForCurrentUserOperationCompleted(object arg) {
            if ((this.GetRunningWorkflowTasksForCurrentUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRunningWorkflowTasksForCurrentUserCompleted(this, new GetRunningWorkflowTasksForCurrentUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/GetRunningWorkflowTasksForCurrentUserForListItem", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserTask[] GetRunningWorkflowTasksForCurrentUserForListItem(int itemId, string listName) {
            object[] results = this.Invoke("GetRunningWorkflowTasksForCurrentUserForListItem", new object[] {
                        itemId,
                        listName});
            return ((UserTask[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRunningWorkflowTasksForCurrentUserForListItemAsync(int itemId, string listName) {
            this.GetRunningWorkflowTasksForCurrentUserForListItemAsync(itemId, listName, null);
        }
        
        /// <remarks/>
        public void GetRunningWorkflowTasksForCurrentUserForListItemAsync(int itemId, string listName, object userState) {
            if ((this.GetRunningWorkflowTasksForCurrentUserForListItemOperationCompleted == null)) {
                this.GetRunningWorkflowTasksForCurrentUserForListItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRunningWorkflowTasksForCurrentUserForListItemOperationCompleted);
            }
            this.InvokeAsync("GetRunningWorkflowTasksForCurrentUserForListItem", new object[] {
                        itemId,
                        listName}, this.GetRunningWorkflowTasksForCurrentUserForListItemOperationCompleted, userState);
        }
        
        private void OnGetRunningWorkflowTasksForCurrentUserForListItemOperationCompleted(object arg) {
            if ((this.GetRunningWorkflowTasksForCurrentUserForListItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRunningWorkflowTasksForCurrentUserForListItemCompleted(this, new GetRunningWorkflowTasksForCurrentUserForListItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/GetRunningWorkflowTasks", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserTask[] GetRunningWorkflowTasks(string fileUrl) {
            object[] results = this.Invoke("GetRunningWorkflowTasks", new object[] {
                        fileUrl});
            return ((UserTask[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRunningWorkflowTasksAsync(string fileUrl) {
            this.GetRunningWorkflowTasksAsync(fileUrl, null);
        }
        
        /// <remarks/>
        public void GetRunningWorkflowTasksAsync(string fileUrl, object userState) {
            if ((this.GetRunningWorkflowTasksOperationCompleted == null)) {
                this.GetRunningWorkflowTasksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRunningWorkflowTasksOperationCompleted);
            }
            this.InvokeAsync("GetRunningWorkflowTasks", new object[] {
                        fileUrl}, this.GetRunningWorkflowTasksOperationCompleted, userState);
        }
        
        private void OnGetRunningWorkflowTasksOperationCompleted(object arg) {
            if ((this.GetRunningWorkflowTasksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRunningWorkflowTasksCompleted(this, new GetRunningWorkflowTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/GetRunningWorkflowTasksForListItem", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserTask[] GetRunningWorkflowTasksForListItem(int itemId, string listName) {
            object[] results = this.Invoke("GetRunningWorkflowTasksForListItem", new object[] {
                        itemId,
                        listName});
            return ((UserTask[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRunningWorkflowTasksForListItemAsync(int itemId, string listName) {
            this.GetRunningWorkflowTasksForListItemAsync(itemId, listName, null);
        }
        
        /// <remarks/>
        public void GetRunningWorkflowTasksForListItemAsync(int itemId, string listName, object userState) {
            if ((this.GetRunningWorkflowTasksForListItemOperationCompleted == null)) {
                this.GetRunningWorkflowTasksForListItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRunningWorkflowTasksForListItemOperationCompleted);
            }
            this.InvokeAsync("GetRunningWorkflowTasksForListItem", new object[] {
                        itemId,
                        listName}, this.GetRunningWorkflowTasksForListItemOperationCompleted, userState);
        }
        
        private void OnGetRunningWorkflowTasksForListItemOperationCompleted(object arg) {
            if ((this.GetRunningWorkflowTasksForListItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRunningWorkflowTasksForListItemCompleted(this, new GetRunningWorkflowTasksForListItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/GetRunningWorkflowTasksCollection", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserTask[] GetRunningWorkflowTasksCollection(string userlogin, string teamsiteUrl, string listName) {
            object[] results = this.Invoke("GetRunningWorkflowTasksCollection", new object[] {
                        userlogin,
                        teamsiteUrl,
                        listName});
            return ((UserTask[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRunningWorkflowTasksCollectionAsync(string userlogin, string teamsiteUrl, string listName) {
            this.GetRunningWorkflowTasksCollectionAsync(userlogin, teamsiteUrl, listName, null);
        }
        
        /// <remarks/>
        public void GetRunningWorkflowTasksCollectionAsync(string userlogin, string teamsiteUrl, string listName, object userState) {
            if ((this.GetRunningWorkflowTasksCollectionOperationCompleted == null)) {
                this.GetRunningWorkflowTasksCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRunningWorkflowTasksCollectionOperationCompleted);
            }
            this.InvokeAsync("GetRunningWorkflowTasksCollection", new object[] {
                        userlogin,
                        teamsiteUrl,
                        listName}, this.GetRunningWorkflowTasksCollectionOperationCompleted, userState);
        }
        
        private void OnGetRunningWorkflowTasksCollectionOperationCompleted(object arg) {
            if ((this.GetRunningWorkflowTasksCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRunningWorkflowTasksCollectionCompleted(this, new GetRunningWorkflowTasksCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/ProcessTaskResponse", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ProcessTaskResponse(string comments, Outcome outcome, int spTaskId) {
            object[] results = this.Invoke("ProcessTaskResponse", new object[] {
                        comments,
                        outcome,
                        spTaskId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessTaskResponseAsync(string comments, Outcome outcome, int spTaskId) {
            this.ProcessTaskResponseAsync(comments, outcome, spTaskId, null);
        }
        
        /// <remarks/>
        public void ProcessTaskResponseAsync(string comments, Outcome outcome, int spTaskId, object userState) {
            if ((this.ProcessTaskResponseOperationCompleted == null)) {
                this.ProcessTaskResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessTaskResponseOperationCompleted);
            }
            this.InvokeAsync("ProcessTaskResponse", new object[] {
                        comments,
                        outcome,
                        spTaskId}, this.ProcessTaskResponseOperationCompleted, userState);
        }
        
        private void OnProcessTaskResponseOperationCompleted(object arg) {
            if ((this.ProcessTaskResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessTaskResponseCompleted(this, new ProcessTaskResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/ProcessTaskResponse2", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ProcessTaskResponse2(string comments, Outcome outcome, int spTaskId, string taskListName) {
            object[] results = this.Invoke("ProcessTaskResponse2", new object[] {
                        comments,
                        outcome,
                        spTaskId,
                        taskListName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessTaskResponse2Async(string comments, Outcome outcome, int spTaskId, string taskListName) {
            this.ProcessTaskResponse2Async(comments, outcome, spTaskId, taskListName, null);
        }
        
        /// <remarks/>
        public void ProcessTaskResponse2Async(string comments, Outcome outcome, int spTaskId, string taskListName, object userState) {
            if ((this.ProcessTaskResponse2OperationCompleted == null)) {
                this.ProcessTaskResponse2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessTaskResponse2OperationCompleted);
            }
            this.InvokeAsync("ProcessTaskResponse2", new object[] {
                        comments,
                        outcome,
                        spTaskId,
                        taskListName}, this.ProcessTaskResponse2OperationCompleted, userState);
        }
        
        private void OnProcessTaskResponse2OperationCompleted(object arg) {
            if ((this.ProcessTaskResponse2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessTaskResponse2Completed(this, new ProcessTaskResponse2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/ProcessTaskResponse3", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProcessTaskResponseResult ProcessTaskResponse3(string comments, Outcome outcome, int spTaskId, string taskListName) {
            object[] results = this.Invoke("ProcessTaskResponse3", new object[] {
                        comments,
                        outcome,
                        spTaskId,
                        taskListName});
            return ((ProcessTaskResponseResult)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessTaskResponse3Async(string comments, Outcome outcome, int spTaskId, string taskListName) {
            this.ProcessTaskResponse3Async(comments, outcome, spTaskId, taskListName, null);
        }
        
        /// <remarks/>
        public void ProcessTaskResponse3Async(string comments, Outcome outcome, int spTaskId, string taskListName, object userState) {
            if ((this.ProcessTaskResponse3OperationCompleted == null)) {
                this.ProcessTaskResponse3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessTaskResponse3OperationCompleted);
            }
            this.InvokeAsync("ProcessTaskResponse3", new object[] {
                        comments,
                        outcome,
                        spTaskId,
                        taskListName}, this.ProcessTaskResponse3OperationCompleted, userState);
        }
        
        private void OnProcessTaskResponse3OperationCompleted(object arg) {
            if ((this.ProcessTaskResponse3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessTaskResponse3Completed(this, new ProcessTaskResponse3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/ProcessFlexiTaskResponse", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ProcessFlexiTaskResponse(string comments, string outcome, int spTaskId, string taskListName) {
            object[] results = this.Invoke("ProcessFlexiTaskResponse", new object[] {
                        comments,
                        outcome,
                        spTaskId,
                        taskListName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessFlexiTaskResponseAsync(string comments, string outcome, int spTaskId, string taskListName) {
            this.ProcessFlexiTaskResponseAsync(comments, outcome, spTaskId, taskListName, null);
        }
        
        /// <remarks/>
        public void ProcessFlexiTaskResponseAsync(string comments, string outcome, int spTaskId, string taskListName, object userState) {
            if ((this.ProcessFlexiTaskResponseOperationCompleted == null)) {
                this.ProcessFlexiTaskResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessFlexiTaskResponseOperationCompleted);
            }
            this.InvokeAsync("ProcessFlexiTaskResponse", new object[] {
                        comments,
                        outcome,
                        spTaskId,
                        taskListName}, this.ProcessFlexiTaskResponseOperationCompleted, userState);
        }
        
        private void OnProcessFlexiTaskResponseOperationCompleted(object arg) {
            if ((this.ProcessFlexiTaskResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessFlexiTaskResponseCompleted(this, new ProcessFlexiTaskResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/ProcessFlexiTaskResponse2", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProcessTaskResponseResult ProcessFlexiTaskResponse2(string comments, string outcome, int spTaskId, string taskListName) {
            object[] results = this.Invoke("ProcessFlexiTaskResponse2", new object[] {
                        comments,
                        outcome,
                        spTaskId,
                        taskListName});
            return ((ProcessTaskResponseResult)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessFlexiTaskResponse2Async(string comments, string outcome, int spTaskId, string taskListName) {
            this.ProcessFlexiTaskResponse2Async(comments, outcome, spTaskId, taskListName, null);
        }
        
        /// <remarks/>
        public void ProcessFlexiTaskResponse2Async(string comments, string outcome, int spTaskId, string taskListName, object userState) {
            if ((this.ProcessFlexiTaskResponse2OperationCompleted == null)) {
                this.ProcessFlexiTaskResponse2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessFlexiTaskResponse2OperationCompleted);
            }
            this.InvokeAsync("ProcessFlexiTaskResponse2", new object[] {
                        comments,
                        outcome,
                        spTaskId,
                        taskListName}, this.ProcessFlexiTaskResponse2OperationCompleted, userState);
        }
        
        private void OnProcessFlexiTaskResponse2OperationCompleted(object arg) {
            if ((this.ProcessFlexiTaskResponse2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessFlexiTaskResponse2Completed(this, new ProcessFlexiTaskResponse2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/GetOutcomesForFlexiTask", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ConfiguredOutcome[] GetOutcomesForFlexiTask(int spTaskId, string taskListName) {
            object[] results = this.Invoke("GetOutcomesForFlexiTask", new object[] {
                        spTaskId,
                        taskListName});
            return ((ConfiguredOutcome[])(results[0]));
        }
        
        /// <remarks/>
        public void GetOutcomesForFlexiTaskAsync(int spTaskId, string taskListName) {
            this.GetOutcomesForFlexiTaskAsync(spTaskId, taskListName, null);
        }
        
        /// <remarks/>
        public void GetOutcomesForFlexiTaskAsync(int spTaskId, string taskListName, object userState) {
            if ((this.GetOutcomesForFlexiTaskOperationCompleted == null)) {
                this.GetOutcomesForFlexiTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOutcomesForFlexiTaskOperationCompleted);
            }
            this.InvokeAsync("GetOutcomesForFlexiTask", new object[] {
                        spTaskId,
                        taskListName}, this.GetOutcomesForFlexiTaskOperationCompleted, userState);
        }
        
        private void OnGetOutcomesForFlexiTaskOperationCompleted(object arg) {
            if ((this.GetOutcomesForFlexiTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOutcomesForFlexiTaskCompleted(this, new GetOutcomesForFlexiTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/DelegateTask", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DelegateTask(int spTaskId, string taskListName, string targetUsername, string comments, bool sendNotification) {
            object[] results = this.Invoke("DelegateTask", new object[] {
                        spTaskId,
                        taskListName,
                        targetUsername,
                        comments,
                        sendNotification});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DelegateTaskAsync(int spTaskId, string taskListName, string targetUsername, string comments, bool sendNotification) {
            this.DelegateTaskAsync(spTaskId, taskListName, targetUsername, comments, sendNotification, null);
        }
        
        /// <remarks/>
        public void DelegateTaskAsync(int spTaskId, string taskListName, string targetUsername, string comments, bool sendNotification, object userState) {
            if ((this.DelegateTaskOperationCompleted == null)) {
                this.DelegateTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelegateTaskOperationCompleted);
            }
            this.InvokeAsync("DelegateTask", new object[] {
                        spTaskId,
                        taskListName,
                        targetUsername,
                        comments,
                        sendNotification}, this.DelegateTaskOperationCompleted, userState);
        }
        
        private void OnDelegateTaskOperationCompleted(object arg) {
            if ((this.DelegateTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelegateTaskCompleted(this, new DelegateTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/GetWorkflowHistory", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WorkflowLog[] GetWorkflowHistory(string fileUrl, SPWorkflowState stateFilter, string workflowNameFilter) {
            object[] results = this.Invoke("GetWorkflowHistory", new object[] {
                        fileUrl,
                        stateFilter,
                        workflowNameFilter});
            return ((WorkflowLog[])(results[0]));
        }
        
        /// <remarks/>
        public void GetWorkflowHistoryAsync(string fileUrl, SPWorkflowState stateFilter, string workflowNameFilter) {
            this.GetWorkflowHistoryAsync(fileUrl, stateFilter, workflowNameFilter, null);
        }
        
        /// <remarks/>
        public void GetWorkflowHistoryAsync(string fileUrl, SPWorkflowState stateFilter, string workflowNameFilter, object userState) {
            if ((this.GetWorkflowHistoryOperationCompleted == null)) {
                this.GetWorkflowHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkflowHistoryOperationCompleted);
            }
            this.InvokeAsync("GetWorkflowHistory", new object[] {
                        fileUrl,
                        stateFilter,
                        workflowNameFilter}, this.GetWorkflowHistoryOperationCompleted, userState);
        }
        
        private void OnGetWorkflowHistoryOperationCompleted(object arg) {
            if ((this.GetWorkflowHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkflowHistoryCompleted(this, new GetWorkflowHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/GetWorkflowHistoryForListItem", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WorkflowLog[] GetWorkflowHistoryForListItem(int itemId, string listName, SPWorkflowState stateFilter, string workflowNameFilter) {
            object[] results = this.Invoke("GetWorkflowHistoryForListItem", new object[] {
                        itemId,
                        listName,
                        stateFilter,
                        workflowNameFilter});
            return ((WorkflowLog[])(results[0]));
        }
        
        /// <remarks/>
        public void GetWorkflowHistoryForListItemAsync(int itemId, string listName, SPWorkflowState stateFilter, string workflowNameFilter) {
            this.GetWorkflowHistoryForListItemAsync(itemId, listName, stateFilter, workflowNameFilter, null);
        }
        
        /// <remarks/>
        public void GetWorkflowHistoryForListItemAsync(int itemId, string listName, SPWorkflowState stateFilter, string workflowNameFilter, object userState) {
            if ((this.GetWorkflowHistoryForListItemOperationCompleted == null)) {
                this.GetWorkflowHistoryForListItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkflowHistoryForListItemOperationCompleted);
            }
            this.InvokeAsync("GetWorkflowHistoryForListItem", new object[] {
                        itemId,
                        listName,
                        stateFilter,
                        workflowNameFilter}, this.GetWorkflowHistoryForListItemOperationCompleted, userState);
        }
        
        private void OnGetWorkflowHistoryForListItemOperationCompleted(object arg) {
            if ((this.GetWorkflowHistoryForListItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkflowHistoryForListItemCompleted(this, new GetWorkflowHistoryForListItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/QueryForMessages", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MessageBoxItem[] QueryForMessages(System.Guid workflowInstanceId, string messageId) {
            object[] results = this.Invoke("QueryForMessages", new object[] {
                        workflowInstanceId,
                        messageId});
            return ((MessageBoxItem[])(results[0]));
        }
        
        /// <remarks/>
        public void QueryForMessagesAsync(System.Guid workflowInstanceId, string messageId) {
            this.QueryForMessagesAsync(workflowInstanceId, messageId, null);
        }
        
        /// <remarks/>
        public void QueryForMessagesAsync(System.Guid workflowInstanceId, string messageId, object userState) {
            if ((this.QueryForMessagesOperationCompleted == null)) {
                this.QueryForMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryForMessagesOperationCompleted);
            }
            this.InvokeAsync("QueryForMessages", new object[] {
                        workflowInstanceId,
                        messageId}, this.QueryForMessagesOperationCompleted, userState);
        }
        
        private void OnQueryForMessagesOperationCompleted(object arg) {
            if ((this.QueryForMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryForMessagesCompleted(this, new QueryForMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/PublishFromNWFXml", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PublishFromNWFXml(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            object[] results = this.Invoke("PublishFromNWFXml", new object[] {
                        workflowFile,
                        listName,
                        workflowName,
                        saveIfCannotPublish});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PublishFromNWFXmlAsync(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            this.PublishFromNWFXmlAsync(workflowFile, listName, workflowName, saveIfCannotPublish, null);
        }
        
        /// <remarks/>
        public void PublishFromNWFXmlAsync(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish, object userState) {
            if ((this.PublishFromNWFXmlOperationCompleted == null)) {
                this.PublishFromNWFXmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishFromNWFXmlOperationCompleted);
            }
            this.InvokeAsync("PublishFromNWFXml", new object[] {
                        workflowFile,
                        listName,
                        workflowName,
                        saveIfCannotPublish}, this.PublishFromNWFXmlOperationCompleted, userState);
        }
        
        private void OnPublishFromNWFXmlOperationCompleted(object arg) {
            if ((this.PublishFromNWFXmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishFromNWFXmlCompleted(this, new PublishFromNWFXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/PublishFromNWFXmlSkipValidation", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PublishFromNWFXmlSkipValidation(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            object[] results = this.Invoke("PublishFromNWFXmlSkipValidation", new object[] {
                        workflowFile,
                        listName,
                        workflowName,
                        saveIfCannotPublish});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PublishFromNWFXmlSkipValidationAsync(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            this.PublishFromNWFXmlSkipValidationAsync(workflowFile, listName, workflowName, saveIfCannotPublish, null);
        }
        
        /// <remarks/>
        public void PublishFromNWFXmlSkipValidationAsync(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish, object userState) {
            if ((this.PublishFromNWFXmlSkipValidationOperationCompleted == null)) {
                this.PublishFromNWFXmlSkipValidationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishFromNWFXmlSkipValidationOperationCompleted);
            }
            this.InvokeAsync("PublishFromNWFXmlSkipValidation", new object[] {
                        workflowFile,
                        listName,
                        workflowName,
                        saveIfCannotPublish}, this.PublishFromNWFXmlSkipValidationOperationCompleted, userState);
        }
        
        private void OnPublishFromNWFXmlSkipValidationOperationCompleted(object arg) {
            if ((this.PublishFromNWFXmlSkipValidationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishFromNWFXmlSkipValidationCompleted(this, new PublishFromNWFXmlSkipValidationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/PublishFromNWFXmlNoOverwrite", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PublishFromNWFXmlNoOverwrite(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            object[] results = this.Invoke("PublishFromNWFXmlNoOverwrite", new object[] {
                        workflowFile,
                        listName,
                        workflowName,
                        saveIfCannotPublish});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PublishFromNWFXmlNoOverwriteAsync(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            this.PublishFromNWFXmlNoOverwriteAsync(workflowFile, listName, workflowName, saveIfCannotPublish, null);
        }
        
        /// <remarks/>
        public void PublishFromNWFXmlNoOverwriteAsync(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish, object userState) {
            if ((this.PublishFromNWFXmlNoOverwriteOperationCompleted == null)) {
                this.PublishFromNWFXmlNoOverwriteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishFromNWFXmlNoOverwriteOperationCompleted);
            }
            this.InvokeAsync("PublishFromNWFXmlNoOverwrite", new object[] {
                        workflowFile,
                        listName,
                        workflowName,
                        saveIfCannotPublish}, this.PublishFromNWFXmlNoOverwriteOperationCompleted, userState);
        }
        
        private void OnPublishFromNWFXmlNoOverwriteOperationCompleted(object arg) {
            if ((this.PublishFromNWFXmlNoOverwriteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishFromNWFXmlNoOverwriteCompleted(this, new PublishFromNWFXmlNoOverwriteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/PublishFromNWFXmlSkipValidationNoOverwrite", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PublishFromNWFXmlSkipValidationNoOverwrite(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            object[] results = this.Invoke("PublishFromNWFXmlSkipValidationNoOverwrite", new object[] {
                        workflowFile,
                        listName,
                        workflowName,
                        saveIfCannotPublish});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PublishFromNWFXmlSkipValidationNoOverwriteAsync(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            this.PublishFromNWFXmlSkipValidationNoOverwriteAsync(workflowFile, listName, workflowName, saveIfCannotPublish, null);
        }
        
        /// <remarks/>
        public void PublishFromNWFXmlSkipValidationNoOverwriteAsync(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish, object userState) {
            if ((this.PublishFromNWFXmlSkipValidationNoOverwriteOperationCompleted == null)) {
                this.PublishFromNWFXmlSkipValidationNoOverwriteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishFromNWFXmlSkipValidationNoOverwriteOperationCompleted);
            }
            this.InvokeAsync("PublishFromNWFXmlSkipValidationNoOverwrite", new object[] {
                        workflowFile,
                        listName,
                        workflowName,
                        saveIfCannotPublish}, this.PublishFromNWFXmlSkipValidationNoOverwriteOperationCompleted, userState);
        }
        
        private void OnPublishFromNWFXmlSkipValidationNoOverwriteOperationCompleted(object arg) {
            if ((this.PublishFromNWFXmlSkipValidationNoOverwriteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishFromNWFXmlSkipValidationNoOverwriteCompleted(this, new PublishFromNWFXmlSkipValidationNoOverwriteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/PublishFromNWF", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PublishFromNWF([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            object[] results = this.Invoke("PublishFromNWF", new object[] {
                        workflowFile,
                        listName,
                        workflowName,
                        saveIfCannotPublish});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PublishFromNWFAsync(byte[] workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            this.PublishFromNWFAsync(workflowFile, listName, workflowName, saveIfCannotPublish, null);
        }
        
        /// <remarks/>
        public void PublishFromNWFAsync(byte[] workflowFile, string listName, string workflowName, bool saveIfCannotPublish, object userState) {
            if ((this.PublishFromNWFOperationCompleted == null)) {
                this.PublishFromNWFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishFromNWFOperationCompleted);
            }
            this.InvokeAsync("PublishFromNWF", new object[] {
                        workflowFile,
                        listName,
                        workflowName,
                        saveIfCannotPublish}, this.PublishFromNWFOperationCompleted, userState);
        }
        
        private void OnPublishFromNWFOperationCompleted(object arg) {
            if ((this.PublishFromNWFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishFromNWFCompleted(this, new PublishFromNWFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/PublishFromNWFNoOverwrite", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PublishFromNWFNoOverwrite([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            object[] results = this.Invoke("PublishFromNWFNoOverwrite", new object[] {
                        workflowFile,
                        listName,
                        workflowName,
                        saveIfCannotPublish});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PublishFromNWFNoOverwriteAsync(byte[] workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            this.PublishFromNWFNoOverwriteAsync(workflowFile, listName, workflowName, saveIfCannotPublish, null);
        }
        
        /// <remarks/>
        public void PublishFromNWFNoOverwriteAsync(byte[] workflowFile, string listName, string workflowName, bool saveIfCannotPublish, object userState) {
            if ((this.PublishFromNWFNoOverwriteOperationCompleted == null)) {
                this.PublishFromNWFNoOverwriteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishFromNWFNoOverwriteOperationCompleted);
            }
            this.InvokeAsync("PublishFromNWFNoOverwrite", new object[] {
                        workflowFile,
                        listName,
                        workflowName,
                        saveIfCannotPublish}, this.PublishFromNWFNoOverwriteOperationCompleted, userState);
        }
        
        private void OnPublishFromNWFNoOverwriteOperationCompleted(object arg) {
            if ((this.PublishFromNWFNoOverwriteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishFromNWFNoOverwriteCompleted(this, new PublishFromNWFNoOverwriteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/PublishFromNWFSkipValidation", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PublishFromNWFSkipValidation([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            object[] results = this.Invoke("PublishFromNWFSkipValidation", new object[] {
                        workflowFile,
                        listName,
                        workflowName,
                        saveIfCannotPublish});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PublishFromNWFSkipValidationAsync(byte[] workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            this.PublishFromNWFSkipValidationAsync(workflowFile, listName, workflowName, saveIfCannotPublish, null);
        }
        
        /// <remarks/>
        public void PublishFromNWFSkipValidationAsync(byte[] workflowFile, string listName, string workflowName, bool saveIfCannotPublish, object userState) {
            if ((this.PublishFromNWFSkipValidationOperationCompleted == null)) {
                this.PublishFromNWFSkipValidationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishFromNWFSkipValidationOperationCompleted);
            }
            this.InvokeAsync("PublishFromNWFSkipValidation", new object[] {
                        workflowFile,
                        listName,
                        workflowName,
                        saveIfCannotPublish}, this.PublishFromNWFSkipValidationOperationCompleted, userState);
        }
        
        private void OnPublishFromNWFSkipValidationOperationCompleted(object arg) {
            if ((this.PublishFromNWFSkipValidationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishFromNWFSkipValidationCompleted(this, new PublishFromNWFSkipValidationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/PublishFromNWFSkipValidationNoOverwrite", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PublishFromNWFSkipValidationNoOverwrite([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            object[] results = this.Invoke("PublishFromNWFSkipValidationNoOverwrite", new object[] {
                        workflowFile,
                        listName,
                        workflowName,
                        saveIfCannotPublish});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PublishFromNWFSkipValidationNoOverwriteAsync(byte[] workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            this.PublishFromNWFSkipValidationNoOverwriteAsync(workflowFile, listName, workflowName, saveIfCannotPublish, null);
        }
        
        /// <remarks/>
        public void PublishFromNWFSkipValidationNoOverwriteAsync(byte[] workflowFile, string listName, string workflowName, bool saveIfCannotPublish, object userState) {
            if ((this.PublishFromNWFSkipValidationNoOverwriteOperationCompleted == null)) {
                this.PublishFromNWFSkipValidationNoOverwriteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishFromNWFSkipValidationNoOverwriteOperationCompleted);
            }
            this.InvokeAsync("PublishFromNWFSkipValidationNoOverwrite", new object[] {
                        workflowFile,
                        listName,
                        workflowName,
                        saveIfCannotPublish}, this.PublishFromNWFSkipValidationNoOverwriteOperationCompleted, userState);
        }
        
        private void OnPublishFromNWFSkipValidationNoOverwriteOperationCompleted(object arg) {
            if ((this.PublishFromNWFSkipValidationNoOverwriteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishFromNWFSkipValidationNoOverwriteCompleted(this, new PublishFromNWFSkipValidationNoOverwriteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/SaveFromNWFXml", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WorkflowMetaData SaveFromNWFXml(string workflowFile, string listName, string workflowName) {
            object[] results = this.Invoke("SaveFromNWFXml", new object[] {
                        workflowFile,
                        listName,
                        workflowName});
            return ((WorkflowMetaData)(results[0]));
        }
        
        /// <remarks/>
        public void SaveFromNWFXmlAsync(string workflowFile, string listName, string workflowName) {
            this.SaveFromNWFXmlAsync(workflowFile, listName, workflowName, null);
        }
        
        /// <remarks/>
        public void SaveFromNWFXmlAsync(string workflowFile, string listName, string workflowName, object userState) {
            if ((this.SaveFromNWFXmlOperationCompleted == null)) {
                this.SaveFromNWFXmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveFromNWFXmlOperationCompleted);
            }
            this.InvokeAsync("SaveFromNWFXml", new object[] {
                        workflowFile,
                        listName,
                        workflowName}, this.SaveFromNWFXmlOperationCompleted, userState);
        }
        
        private void OnSaveFromNWFXmlOperationCompleted(object arg) {
            if ((this.SaveFromNWFXmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveFromNWFXmlCompleted(this, new SaveFromNWFXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/SaveFromNWFXmlNoOverwrite", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WorkflowMetaData SaveFromNWFXmlNoOverwrite(string workflowFile, string listName, string workflowName) {
            object[] results = this.Invoke("SaveFromNWFXmlNoOverwrite", new object[] {
                        workflowFile,
                        listName,
                        workflowName});
            return ((WorkflowMetaData)(results[0]));
        }
        
        /// <remarks/>
        public void SaveFromNWFXmlNoOverwriteAsync(string workflowFile, string listName, string workflowName) {
            this.SaveFromNWFXmlNoOverwriteAsync(workflowFile, listName, workflowName, null);
        }
        
        /// <remarks/>
        public void SaveFromNWFXmlNoOverwriteAsync(string workflowFile, string listName, string workflowName, object userState) {
            if ((this.SaveFromNWFXmlNoOverwriteOperationCompleted == null)) {
                this.SaveFromNWFXmlNoOverwriteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveFromNWFXmlNoOverwriteOperationCompleted);
            }
            this.InvokeAsync("SaveFromNWFXmlNoOverwrite", new object[] {
                        workflowFile,
                        listName,
                        workflowName}, this.SaveFromNWFXmlNoOverwriteOperationCompleted, userState);
        }
        
        private void OnSaveFromNWFXmlNoOverwriteOperationCompleted(object arg) {
            if ((this.SaveFromNWFXmlNoOverwriteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveFromNWFXmlNoOverwriteCompleted(this, new SaveFromNWFXmlNoOverwriteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/SaveFromNWF", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WorkflowMetaData SaveFromNWF([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] workflowFile, string listName, string workflowName) {
            object[] results = this.Invoke("SaveFromNWF", new object[] {
                        workflowFile,
                        listName,
                        workflowName});
            return ((WorkflowMetaData)(results[0]));
        }
        
        /// <remarks/>
        public void SaveFromNWFAsync(byte[] workflowFile, string listName, string workflowName) {
            this.SaveFromNWFAsync(workflowFile, listName, workflowName, null);
        }
        
        /// <remarks/>
        public void SaveFromNWFAsync(byte[] workflowFile, string listName, string workflowName, object userState) {
            if ((this.SaveFromNWFOperationCompleted == null)) {
                this.SaveFromNWFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveFromNWFOperationCompleted);
            }
            this.InvokeAsync("SaveFromNWF", new object[] {
                        workflowFile,
                        listName,
                        workflowName}, this.SaveFromNWFOperationCompleted, userState);
        }
        
        private void OnSaveFromNWFOperationCompleted(object arg) {
            if ((this.SaveFromNWFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveFromNWFCompleted(this, new SaveFromNWFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/SaveFromNWFNoOverwrite", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WorkflowMetaData SaveFromNWFNoOverwrite([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] workflowFile, string listName, string workflowName) {
            object[] results = this.Invoke("SaveFromNWFNoOverwrite", new object[] {
                        workflowFile,
                        listName,
                        workflowName});
            return ((WorkflowMetaData)(results[0]));
        }
        
        /// <remarks/>
        public void SaveFromNWFNoOverwriteAsync(byte[] workflowFile, string listName, string workflowName) {
            this.SaveFromNWFNoOverwriteAsync(workflowFile, listName, workflowName, null);
        }
        
        /// <remarks/>
        public void SaveFromNWFNoOverwriteAsync(byte[] workflowFile, string listName, string workflowName, object userState) {
            if ((this.SaveFromNWFNoOverwriteOperationCompleted == null)) {
                this.SaveFromNWFNoOverwriteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveFromNWFNoOverwriteOperationCompleted);
            }
            this.InvokeAsync("SaveFromNWFNoOverwrite", new object[] {
                        workflowFile,
                        listName,
                        workflowName}, this.SaveFromNWFNoOverwriteOperationCompleted, userState);
        }
        
        private void OnSaveFromNWFNoOverwriteOperationCompleted(object arg) {
            if ((this.SaveFromNWFNoOverwriteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveFromNWFNoOverwriteCompleted(this, new SaveFromNWFNoOverwriteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/AddWorkflowScheduleOnListItem", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddWorkflowScheduleOnListItem(int itemId, string listName, string workflowName, string startDataXml, Schedule schedule, bool updateIfExists) {
            object[] results = this.Invoke("AddWorkflowScheduleOnListItem", new object[] {
                        itemId,
                        listName,
                        workflowName,
                        startDataXml,
                        schedule,
                        updateIfExists});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddWorkflowScheduleOnListItemAsync(int itemId, string listName, string workflowName, string startDataXml, Schedule schedule, bool updateIfExists) {
            this.AddWorkflowScheduleOnListItemAsync(itemId, listName, workflowName, startDataXml, schedule, updateIfExists, null);
        }
        
        /// <remarks/>
        public void AddWorkflowScheduleOnListItemAsync(int itemId, string listName, string workflowName, string startDataXml, Schedule schedule, bool updateIfExists, object userState) {
            if ((this.AddWorkflowScheduleOnListItemOperationCompleted == null)) {
                this.AddWorkflowScheduleOnListItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddWorkflowScheduleOnListItemOperationCompleted);
            }
            this.InvokeAsync("AddWorkflowScheduleOnListItem", new object[] {
                        itemId,
                        listName,
                        workflowName,
                        startDataXml,
                        schedule,
                        updateIfExists}, this.AddWorkflowScheduleOnListItemOperationCompleted, userState);
        }
        
        private void OnAddWorkflowScheduleOnListItemOperationCompleted(object arg) {
            if ((this.AddWorkflowScheduleOnListItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddWorkflowScheduleOnListItemCompleted(this, new AddWorkflowScheduleOnListItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/AddWorkflowSchedule", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddWorkflowSchedule(string fileUrl, string workflowName, string startDataXml, Schedule schedule, bool updateIfExists) {
            object[] results = this.Invoke("AddWorkflowSchedule", new object[] {
                        fileUrl,
                        workflowName,
                        startDataXml,
                        schedule,
                        updateIfExists});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddWorkflowScheduleAsync(string fileUrl, string workflowName, string startDataXml, Schedule schedule, bool updateIfExists) {
            this.AddWorkflowScheduleAsync(fileUrl, workflowName, startDataXml, schedule, updateIfExists, null);
        }
        
        /// <remarks/>
        public void AddWorkflowScheduleAsync(string fileUrl, string workflowName, string startDataXml, Schedule schedule, bool updateIfExists, object userState) {
            if ((this.AddWorkflowScheduleOperationCompleted == null)) {
                this.AddWorkflowScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddWorkflowScheduleOperationCompleted);
            }
            this.InvokeAsync("AddWorkflowSchedule", new object[] {
                        fileUrl,
                        workflowName,
                        startDataXml,
                        schedule,
                        updateIfExists}, this.AddWorkflowScheduleOperationCompleted, userState);
        }
        
        private void OnAddWorkflowScheduleOperationCompleted(object arg) {
            if ((this.AddWorkflowScheduleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddWorkflowScheduleCompleted(this, new AddWorkflowScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/RemoveWorkflowScheduleOnListItem", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveWorkflowScheduleOnListItem(int itemId, string listName, string workflowName) {
            object[] results = this.Invoke("RemoveWorkflowScheduleOnListItem", new object[] {
                        itemId,
                        listName,
                        workflowName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveWorkflowScheduleOnListItemAsync(int itemId, string listName, string workflowName) {
            this.RemoveWorkflowScheduleOnListItemAsync(itemId, listName, workflowName, null);
        }
        
        /// <remarks/>
        public void RemoveWorkflowScheduleOnListItemAsync(int itemId, string listName, string workflowName, object userState) {
            if ((this.RemoveWorkflowScheduleOnListItemOperationCompleted == null)) {
                this.RemoveWorkflowScheduleOnListItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveWorkflowScheduleOnListItemOperationCompleted);
            }
            this.InvokeAsync("RemoveWorkflowScheduleOnListItem", new object[] {
                        itemId,
                        listName,
                        workflowName}, this.RemoveWorkflowScheduleOnListItemOperationCompleted, userState);
        }
        
        private void OnRemoveWorkflowScheduleOnListItemOperationCompleted(object arg) {
            if ((this.RemoveWorkflowScheduleOnListItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveWorkflowScheduleOnListItemCompleted(this, new RemoveWorkflowScheduleOnListItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/RemoveWorkflowSchedule", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveWorkflowSchedule(string fileUrl, string workflowName) {
            object[] results = this.Invoke("RemoveWorkflowSchedule", new object[] {
                        fileUrl,
                        workflowName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveWorkflowScheduleAsync(string fileUrl, string workflowName) {
            this.RemoveWorkflowScheduleAsync(fileUrl, workflowName, null);
        }
        
        /// <remarks/>
        public void RemoveWorkflowScheduleAsync(string fileUrl, string workflowName, object userState) {
            if ((this.RemoveWorkflowScheduleOperationCompleted == null)) {
                this.RemoveWorkflowScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveWorkflowScheduleOperationCompleted);
            }
            this.InvokeAsync("RemoveWorkflowSchedule", new object[] {
                        fileUrl,
                        workflowName}, this.RemoveWorkflowScheduleOperationCompleted, userState);
        }
        
        private void OnRemoveWorkflowScheduleOperationCompleted(object arg) {
            if ((this.RemoveWorkflowScheduleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveWorkflowScheduleCompleted(this, new RemoveWorkflowScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/DelegateAllTasks", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] DelegateAllTasks(string currentUser, string newUser, bool sendNotification, string comments, bool global) {
            object[] results = this.Invoke("DelegateAllTasks", new object[] {
                        currentUser,
                        newUser,
                        sendNotification,
                        comments,
                        global});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void DelegateAllTasksAsync(string currentUser, string newUser, bool sendNotification, string comments, bool global) {
            this.DelegateAllTasksAsync(currentUser, newUser, sendNotification, comments, global, null);
        }
        
        /// <remarks/>
        public void DelegateAllTasksAsync(string currentUser, string newUser, bool sendNotification, string comments, bool global, object userState) {
            if ((this.DelegateAllTasksOperationCompleted == null)) {
                this.DelegateAllTasksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelegateAllTasksOperationCompleted);
            }
            this.InvokeAsync("DelegateAllTasks", new object[] {
                        currentUser,
                        newUser,
                        sendNotification,
                        comments,
                        global}, this.DelegateAllTasksOperationCompleted, userState);
        }
        
        private void OnDelegateAllTasksOperationCompleted(object arg) {
            if ((this.DelegateAllTasksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelegateAllTasksCompleted(this, new DelegateAllTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/AddLongTermDelegationRule", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddLongTermDelegationRule(System.DateTime fromTheBeginningOf, System.DateTime untilTheEndOf, string delegateFrom, string delegateTo, bool currentSiteOnly) {
            object[] results = this.Invoke("AddLongTermDelegationRule", new object[] {
                        fromTheBeginningOf,
                        untilTheEndOf,
                        delegateFrom,
                        delegateTo,
                        currentSiteOnly});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddLongTermDelegationRuleAsync(System.DateTime fromTheBeginningOf, System.DateTime untilTheEndOf, string delegateFrom, string delegateTo, bool currentSiteOnly) {
            this.AddLongTermDelegationRuleAsync(fromTheBeginningOf, untilTheEndOf, delegateFrom, delegateTo, currentSiteOnly, null);
        }
        
        /// <remarks/>
        public void AddLongTermDelegationRuleAsync(System.DateTime fromTheBeginningOf, System.DateTime untilTheEndOf, string delegateFrom, string delegateTo, bool currentSiteOnly, object userState) {
            if ((this.AddLongTermDelegationRuleOperationCompleted == null)) {
                this.AddLongTermDelegationRuleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddLongTermDelegationRuleOperationCompleted);
            }
            this.InvokeAsync("AddLongTermDelegationRule", new object[] {
                        fromTheBeginningOf,
                        untilTheEndOf,
                        delegateFrom,
                        delegateTo,
                        currentSiteOnly}, this.AddLongTermDelegationRuleOperationCompleted, userState);
        }
        
        private void OnAddLongTermDelegationRuleOperationCompleted(object arg) {
            if ((this.AddLongTermDelegationRuleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddLongTermDelegationRuleCompleted(this, new AddLongTermDelegationRuleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/DeleteLongTermDelegationRule", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteLongTermDelegationRule(int id) {
            this.Invoke("DeleteLongTermDelegationRule", new object[] {
                        id});
        }
        
        /// <remarks/>
        public void DeleteLongTermDelegationRuleAsync(int id) {
            this.DeleteLongTermDelegationRuleAsync(id, null);
        }
        
        /// <remarks/>
        public void DeleteLongTermDelegationRuleAsync(int id, object userState) {
            if ((this.DeleteLongTermDelegationRuleOperationCompleted == null)) {
                this.DeleteLongTermDelegationRuleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteLongTermDelegationRuleOperationCompleted);
            }
            this.InvokeAsync("DeleteLongTermDelegationRule", new object[] {
                        id}, this.DeleteLongTermDelegationRuleOperationCompleted, userState);
        }
        
        private void OnDeleteLongTermDelegationRuleOperationCompleted(object arg) {
            if ((this.DeleteLongTermDelegationRuleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteLongTermDelegationRuleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/FixWorkflowsInSiteFromTemplate", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FixWorkflowsInSiteFromTemplate() {
            this.Invoke("FixWorkflowsInSiteFromTemplate", new object[0]);
        }
        
        /// <remarks/>
        public void FixWorkflowsInSiteFromTemplateAsync() {
            this.FixWorkflowsInSiteFromTemplateAsync(null);
        }
        
        /// <remarks/>
        public void FixWorkflowsInSiteFromTemplateAsync(object userState) {
            if ((this.FixWorkflowsInSiteFromTemplateOperationCompleted == null)) {
                this.FixWorkflowsInSiteFromTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFixWorkflowsInSiteFromTemplateOperationCompleted);
            }
            this.InvokeAsync("FixWorkflowsInSiteFromTemplate", new object[0], this.FixWorkflowsInSiteFromTemplateOperationCompleted, userState);
        }
        
        private void OnFixWorkflowsInSiteFromTemplateOperationCompleted(object arg) {
            if ((this.FixWorkflowsInSiteFromTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FixWorkflowsInSiteFromTemplateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/ExportWorkflow", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExportWorkflow(string workflowName, string listName, string workflowType) {
            object[] results = this.Invoke("ExportWorkflow", new object[] {
                        workflowName,
                        listName,
                        workflowType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExportWorkflowAsync(string workflowName, string listName, string workflowType) {
            this.ExportWorkflowAsync(workflowName, listName, workflowType, null);
        }
        
        /// <remarks/>
        public void ExportWorkflowAsync(string workflowName, string listName, string workflowType, object userState) {
            if ((this.ExportWorkflowOperationCompleted == null)) {
                this.ExportWorkflowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportWorkflowOperationCompleted);
            }
            this.InvokeAsync("ExportWorkflow", new object[] {
                        workflowName,
                        listName,
                        workflowType}, this.ExportWorkflowOperationCompleted, userState);
        }
        
        private void OnExportWorkflowOperationCompleted(object arg) {
            if ((this.ExportWorkflowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExportWorkflowCompleted(this, new ExportWorkflowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/GetTaskStubsForCurrentUser", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskStub[] GetTaskStubsForCurrentUser() {
            object[] results = this.Invoke("GetTaskStubsForCurrentUser", new object[0]);
            return ((TaskStub[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTaskStubsForCurrentUserAsync() {
            this.GetTaskStubsForCurrentUserAsync(null);
        }
        
        /// <remarks/>
        public void GetTaskStubsForCurrentUserAsync(object userState) {
            if ((this.GetTaskStubsForCurrentUserOperationCompleted == null)) {
                this.GetTaskStubsForCurrentUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskStubsForCurrentUserOperationCompleted);
            }
            this.InvokeAsync("GetTaskStubsForCurrentUser", new object[0], this.GetTaskStubsForCurrentUserOperationCompleted, userState);
        }
        
        private void OnGetTaskStubsForCurrentUserOperationCompleted(object arg) {
            if ((this.GetTaskStubsForCurrentUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskStubsForCurrentUserCompleted(this, new GetTaskStubsForCurrentUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/GetTaskDetailsUsingStub", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WorkflowTaskDetail GetTaskDetailsUsingStub(string taskToken) {
            object[] results = this.Invoke("GetTaskDetailsUsingStub", new object[] {
                        taskToken});
            return ((WorkflowTaskDetail)(results[0]));
        }
        
        /// <remarks/>
        public void GetTaskDetailsUsingStubAsync(string taskToken) {
            this.GetTaskDetailsUsingStubAsync(taskToken, null);
        }
        
        /// <remarks/>
        public void GetTaskDetailsUsingStubAsync(string taskToken, object userState) {
            if ((this.GetTaskDetailsUsingStubOperationCompleted == null)) {
                this.GetTaskDetailsUsingStubOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskDetailsUsingStubOperationCompleted);
            }
            this.InvokeAsync("GetTaskDetailsUsingStub", new object[] {
                        taskToken}, this.GetTaskDetailsUsingStubOperationCompleted, userState);
        }
        
        private void OnGetTaskDetailsUsingStubOperationCompleted(object arg) {
            if ((this.GetTaskDetailsUsingStubCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskDetailsUsingStubCompleted(this, new GetTaskDetailsUsingStubCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/ProcessTaskResponseUsingToken", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ProcessTaskResponseUsingToken(string comments, Outcome outcome, string taskToken, int customOutcome) {
            this.Invoke("ProcessTaskResponseUsingToken", new object[] {
                        comments,
                        outcome,
                        taskToken,
                        customOutcome});
        }
        
        /// <remarks/>
        public void ProcessTaskResponseUsingTokenAsync(string comments, Outcome outcome, string taskToken, int customOutcome) {
            this.ProcessTaskResponseUsingTokenAsync(comments, outcome, taskToken, customOutcome, null);
        }
        
        /// <remarks/>
        public void ProcessTaskResponseUsingTokenAsync(string comments, Outcome outcome, string taskToken, int customOutcome, object userState) {
            if ((this.ProcessTaskResponseUsingTokenOperationCompleted == null)) {
                this.ProcessTaskResponseUsingTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessTaskResponseUsingTokenOperationCompleted);
            }
            this.InvokeAsync("ProcessTaskResponseUsingToken", new object[] {
                        comments,
                        outcome,
                        taskToken,
                        customOutcome}, this.ProcessTaskResponseUsingTokenOperationCompleted, userState);
        }
        
        private void OnProcessTaskResponseUsingTokenOperationCompleted(object arg) {
            if ((this.ProcessTaskResponseUsingTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessTaskResponseUsingTokenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/GetFolders", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Folder[] GetFolders(string listGuid) {
            object[] results = this.Invoke("GetFolders", new object[] {
                        listGuid});
            return ((Folder[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFoldersAsync(string listGuid) {
            this.GetFoldersAsync(listGuid, null);
        }
        
        /// <remarks/>
        public void GetFoldersAsync(string listGuid, object userState) {
            if ((this.GetFoldersOperationCompleted == null)) {
                this.GetFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFoldersOperationCompleted);
            }
            this.InvokeAsync("GetFolders", new object[] {
                        listGuid}, this.GetFoldersOperationCompleted, userState);
        }
        
        private void OnGetFoldersOperationCompleted(object arg) {
            if ((this.GetFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFoldersCompleted(this, new GetFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nintex.com/GetListContentTypes", RequestNamespace="http://nintex.com", ResponseNamespace="http://nintex.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ContentType[] GetListContentTypes(string listGuid) {
            object[] results = this.Invoke("GetListContentTypes", new object[] {
                        listGuid});
            return ((ContentType[])(results[0]));
        }
        
        /// <remarks/>
        public void GetListContentTypesAsync(string listGuid) {
            this.GetListContentTypesAsync(listGuid, null);
        }
        
        /// <remarks/>
        public void GetListContentTypesAsync(string listGuid, object userState) {
            if ((this.GetListContentTypesOperationCompleted == null)) {
                this.GetListContentTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListContentTypesOperationCompleted);
            }
            this.InvokeAsync("GetListContentTypes", new object[] {
                        listGuid}, this.GetListContentTypesOperationCompleted, userState);
        }
        
        private void OnGetListContentTypesOperationCompleted(object arg) {
            if ((this.GetListContentTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListContentTypesCompleted(this, new GetListContentTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class WorkflowMetaData {
        
        private string nameField;
        
        private string modifiedByField;
        
        private string publishedByField;
        
        private string workflowDescriptionField;
        
        private System.Guid ecbIdField;
        
        private System.DateTime publishedField;
        
        private string localTimePublishedStringField;
        
        private System.DateTime timeLastModifiedField;
        
        private string localTimeLastModifiedStringField;
        
        private string changeInformationField;
        
        private System.Guid workflowIdField;
        
        private string workflowTypeDisplayNameField;
        
        private string uIVersionField;
        
        private bool isPublishedField;
        
        private bool previouslyPublishedField;
        
        private System.Guid listIdField;
        
        private int majorVersionField;
        
        private int minorVersionField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string ModifiedBy {
            get {
                return this.modifiedByField;
            }
            set {
                this.modifiedByField = value;
            }
        }
        
        /// <remarks/>
        public string PublishedBy {
            get {
                return this.publishedByField;
            }
            set {
                this.publishedByField = value;
            }
        }
        
        /// <remarks/>
        public string WorkflowDescription {
            get {
                return this.workflowDescriptionField;
            }
            set {
                this.workflowDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid EcbId {
            get {
                return this.ecbIdField;
            }
            set {
                this.ecbIdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Published {
            get {
                return this.publishedField;
            }
            set {
                this.publishedField = value;
            }
        }
        
        /// <remarks/>
        public string LocalTimePublishedString {
            get {
                return this.localTimePublishedStringField;
            }
            set {
                this.localTimePublishedStringField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime TimeLastModified {
            get {
                return this.timeLastModifiedField;
            }
            set {
                this.timeLastModifiedField = value;
            }
        }
        
        /// <remarks/>
        public string LocalTimeLastModifiedString {
            get {
                return this.localTimeLastModifiedStringField;
            }
            set {
                this.localTimeLastModifiedStringField = value;
            }
        }
        
        /// <remarks/>
        public string ChangeInformation {
            get {
                return this.changeInformationField;
            }
            set {
                this.changeInformationField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid WorkflowId {
            get {
                return this.workflowIdField;
            }
            set {
                this.workflowIdField = value;
            }
        }
        
        /// <remarks/>
        public string WorkflowTypeDisplayName {
            get {
                return this.workflowTypeDisplayNameField;
            }
            set {
                this.workflowTypeDisplayNameField = value;
            }
        }
        
        /// <remarks/>
        public string UIVersion {
            get {
                return this.uIVersionField;
            }
            set {
                this.uIVersionField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPublished {
            get {
                return this.isPublishedField;
            }
            set {
                this.isPublishedField = value;
            }
        }
        
        /// <remarks/>
        public bool PreviouslyPublished {
            get {
                return this.previouslyPublishedField;
            }
            set {
                this.previouslyPublishedField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid ListId {
            get {
                return this.listIdField;
            }
            set {
                this.listIdField = value;
            }
        }
        
        /// <remarks/>
        public int MajorVersion {
            get {
                return this.majorVersionField;
            }
            set {
                this.majorVersionField = value;
            }
        }
        
        /// <remarks/>
        public int MinorVersion {
            get {
                return this.minorVersionField;
            }
            set {
                this.minorVersionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class ContentType {
        
        private string idField;
        
        private string nameField;
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class Folder {
        
        private string nameField;
        
        private string urlField;
        
        private string idField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Url {
            get {
                return this.urlField;
            }
            set {
                this.urlField = value;
            }
        }
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class Field {
        
        private string nameField;
        
        private string displayNameField;
        
        private string valueField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class WorkflowTaskDetail {
        
        private ConfiguredOutcome[] availableCustomOutcomeField;
        
        private Field[] itemPropertiesField;
        
        /// <remarks/>
        public ConfiguredOutcome[] AvailableCustomOutcome {
            get {
                return this.availableCustomOutcomeField;
            }
            set {
                this.availableCustomOutcomeField = value;
            }
        }
        
        /// <remarks/>
        public Field[] ItemProperties {
            get {
                return this.itemPropertiesField;
            }
            set {
                this.itemPropertiesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class ConfiguredOutcome {
        
        private int idField;
        
        private string nameField;
        
        private CommentsMode commentsModeField;
        
        private string descriptionField;
        
        private int branchIndexField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public CommentsMode CommentsMode {
            get {
                return this.commentsModeField;
            }
            set {
                this.commentsModeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int BranchIndex {
            get {
                return this.branchIndexField;
            }
            set {
                this.branchIndexField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public enum CommentsMode {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Optional,
        
        /// <remarks/>
        Required,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class TaskStub {
        
        private string taskTokenField;
        
        private string workflowNameField;
        
        private string activityTitleField;
        
        private System.DateTime entryTimeField;
        
        /// <remarks/>
        public string TaskToken {
            get {
                return this.taskTokenField;
            }
            set {
                this.taskTokenField = value;
            }
        }
        
        /// <remarks/>
        public string WorkflowName {
            get {
                return this.workflowNameField;
            }
            set {
                this.workflowNameField = value;
            }
        }
        
        /// <remarks/>
        public string ActivityTitle {
            get {
                return this.activityTitleField;
            }
            set {
                this.activityTitleField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EntryTime {
            get {
                return this.entryTimeField;
            }
            set {
                this.entryTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class RepeatInterval {
        
        private RepeatIntervalType typeField;
        
        private int countBetweenIntervalsField;
        
        /// <remarks/>
        public RepeatIntervalType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public int CountBetweenIntervals {
            get {
                return this.countBetweenIntervalsField;
            }
            set {
                this.countBetweenIntervalsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public enum RepeatIntervalType {
        
        /// <remarks/>
        Daily,
        
        /// <remarks/>
        Monthly,
        
        /// <remarks/>
        Hourly,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class Schedule {
        
        private int maximumRepeatsField;
        
        private bool workdaysOnlyField;
        
        private RepeatInterval repeatIntervalField;
        
        private EndScheduleOn endOnField;
        
        private System.DateTime startTimeField;
        
        private System.DateTime endTimeField;
        
        /// <remarks/>
        public int MaximumRepeats {
            get {
                return this.maximumRepeatsField;
            }
            set {
                this.maximumRepeatsField = value;
            }
        }
        
        /// <remarks/>
        public bool WorkdaysOnly {
            get {
                return this.workdaysOnlyField;
            }
            set {
                this.workdaysOnlyField = value;
            }
        }
        
        /// <remarks/>
        public RepeatInterval RepeatInterval {
            get {
                return this.repeatIntervalField;
            }
            set {
                this.repeatIntervalField = value;
            }
        }
        
        /// <remarks/>
        public EndScheduleOn EndOn {
            get {
                return this.endOnField;
            }
            set {
                this.endOnField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartTime {
            get {
                return this.startTimeField;
            }
            set {
                this.startTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndTime {
            get {
                return this.endTimeField;
            }
            set {
                this.endTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public enum EndScheduleOn {
        
        /// <remarks/>
        RepeatCount,
        
        /// <remarks/>
        EndDate,
        
        /// <remarks/>
        NoLimit,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class StartDataItem {
        
        private string valueField;
        
        private string keyField;
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class MessageBoxItem {
        
        private string messageIDField;
        
        private System.Guid workflowInstanceIDField;
        
        private StartDataItem[] dataField;
        
        /// <remarks/>
        public string MessageID {
            get {
                return this.messageIDField;
            }
            set {
                this.messageIDField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid WorkflowInstanceID {
            get {
                return this.workflowInstanceIDField;
            }
            set {
                this.workflowInstanceIDField = value;
            }
        }
        
        /// <remarks/>
        public StartDataItem[] Data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class HumanTaskLogInfo {
        
        private System.DateTime entryTimeField;
        
        private string entryTimeShortField;
        
        private string entryTimeLongField;
        
        private string entryDateShortField;
        
        private string entryDateLongField;
        
        private System.DateTime endTimeField;
        
        private string endTimeShortField;
        
        private string endTimeLongField;
        
        private string endDateShortField;
        
        private string endDateLongField;
        
        private string displayNameField;
        
        private string activityTitleField;
        
        private int sequenceIdField;
        
        private string usernameField;
        
        private string emailField;
        
        private System.DateTime userStartField;
        
        private string userStartTimeShortField;
        
        private string userStartTimeLongField;
        
        private string userStartDateShortField;
        
        private string userStartDateLongField;
        
        private System.DateTime userEndField;
        
        private string userEndTimeShortField;
        
        private string userEndTimeLongField;
        
        private string userEndDateShortField;
        
        private string userEndDateLongField;
        
        private string userCommentsField;
        
        private Outcome outcomeField;
        
        private string customOutcomeField;
        
        private System.DateTime userActionTimeField;
        
        private string userActionTimeShortField;
        
        private string userActionTimeLongField;
        
        private string userActionDateShortField;
        
        private string userActionDateLongField;
        
        /// <remarks/>
        public System.DateTime EntryTime {
            get {
                return this.entryTimeField;
            }
            set {
                this.entryTimeField = value;
            }
        }
        
        /// <remarks/>
        public string EntryTimeShort {
            get {
                return this.entryTimeShortField;
            }
            set {
                this.entryTimeShortField = value;
            }
        }
        
        /// <remarks/>
        public string EntryTimeLong {
            get {
                return this.entryTimeLongField;
            }
            set {
                this.entryTimeLongField = value;
            }
        }
        
        /// <remarks/>
        public string EntryDateShort {
            get {
                return this.entryDateShortField;
            }
            set {
                this.entryDateShortField = value;
            }
        }
        
        /// <remarks/>
        public string EntryDateLong {
            get {
                return this.entryDateLongField;
            }
            set {
                this.entryDateLongField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndTime {
            get {
                return this.endTimeField;
            }
            set {
                this.endTimeField = value;
            }
        }
        
        /// <remarks/>
        public string EndTimeShort {
            get {
                return this.endTimeShortField;
            }
            set {
                this.endTimeShortField = value;
            }
        }
        
        /// <remarks/>
        public string EndTimeLong {
            get {
                return this.endTimeLongField;
            }
            set {
                this.endTimeLongField = value;
            }
        }
        
        /// <remarks/>
        public string EndDateShort {
            get {
                return this.endDateShortField;
            }
            set {
                this.endDateShortField = value;
            }
        }
        
        /// <remarks/>
        public string EndDateLong {
            get {
                return this.endDateLongField;
            }
            set {
                this.endDateLongField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public string ActivityTitle {
            get {
                return this.activityTitleField;
            }
            set {
                this.activityTitleField = value;
            }
        }
        
        /// <remarks/>
        public int SequenceId {
            get {
                return this.sequenceIdField;
            }
            set {
                this.sequenceIdField = value;
            }
        }
        
        /// <remarks/>
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime UserStart {
            get {
                return this.userStartField;
            }
            set {
                this.userStartField = value;
            }
        }
        
        /// <remarks/>
        public string UserStartTimeShort {
            get {
                return this.userStartTimeShortField;
            }
            set {
                this.userStartTimeShortField = value;
            }
        }
        
        /// <remarks/>
        public string UserStartTimeLong {
            get {
                return this.userStartTimeLongField;
            }
            set {
                this.userStartTimeLongField = value;
            }
        }
        
        /// <remarks/>
        public string UserStartDateShort {
            get {
                return this.userStartDateShortField;
            }
            set {
                this.userStartDateShortField = value;
            }
        }
        
        /// <remarks/>
        public string UserStartDateLong {
            get {
                return this.userStartDateLongField;
            }
            set {
                this.userStartDateLongField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime UserEnd {
            get {
                return this.userEndField;
            }
            set {
                this.userEndField = value;
            }
        }
        
        /// <remarks/>
        public string UserEndTimeShort {
            get {
                return this.userEndTimeShortField;
            }
            set {
                this.userEndTimeShortField = value;
            }
        }
        
        /// <remarks/>
        public string UserEndTimeLong {
            get {
                return this.userEndTimeLongField;
            }
            set {
                this.userEndTimeLongField = value;
            }
        }
        
        /// <remarks/>
        public string UserEndDateShort {
            get {
                return this.userEndDateShortField;
            }
            set {
                this.userEndDateShortField = value;
            }
        }
        
        /// <remarks/>
        public string UserEndDateLong {
            get {
                return this.userEndDateLongField;
            }
            set {
                this.userEndDateLongField = value;
            }
        }
        
        /// <remarks/>
        public string UserComments {
            get {
                return this.userCommentsField;
            }
            set {
                this.userCommentsField = value;
            }
        }
        
        /// <remarks/>
        public Outcome Outcome {
            get {
                return this.outcomeField;
            }
            set {
                this.outcomeField = value;
            }
        }
        
        /// <remarks/>
        public string CustomOutcome {
            get {
                return this.customOutcomeField;
            }
            set {
                this.customOutcomeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime UserActionTime {
            get {
                return this.userActionTimeField;
            }
            set {
                this.userActionTimeField = value;
            }
        }
        
        /// <remarks/>
        public string UserActionTimeShort {
            get {
                return this.userActionTimeShortField;
            }
            set {
                this.userActionTimeShortField = value;
            }
        }
        
        /// <remarks/>
        public string UserActionTimeLong {
            get {
                return this.userActionTimeLongField;
            }
            set {
                this.userActionTimeLongField = value;
            }
        }
        
        /// <remarks/>
        public string UserActionDateShort {
            get {
                return this.userActionDateShortField;
            }
            set {
                this.userActionDateShortField = value;
            }
        }
        
        /// <remarks/>
        public string UserActionDateLong {
            get {
                return this.userActionDateLongField;
            }
            set {
                this.userActionDateLongField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public enum Outcome {
        
        /// <remarks/>
        Approved,
        
        /// <remarks/>
        Rejected,
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        Cancelled,
        
        /// <remarks/>
        NotRequired,
        
        /// <remarks/>
        Continue,
        
        /// <remarks/>
        Delegated,
        
        /// <remarks/>
        Custom,
        
        /// <remarks/>
        OverrideApproved,
        
        /// <remarks/>
        OverrideRejected,
        
        /// <remarks/>
        OverrideContinue,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NWContextData))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class NWContextKey {
        
        private SPFieldType dataTypeField;
        
        private string nameField;
        
        private string displayNameField;
        
        private string categoryField;
        
        private string descriptionField;
        
        /// <remarks/>
        public SPFieldType DataType {
            get {
                return this.dataTypeField;
            }
            set {
                this.dataTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public string Category {
            get {
                return this.categoryField;
            }
            set {
                this.categoryField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public enum SPFieldType {
        
        /// <remarks/>
        Invalid,
        
        /// <remarks/>
        Integer,
        
        /// <remarks/>
        Text,
        
        /// <remarks/>
        Note,
        
        /// <remarks/>
        DateTime,
        
        /// <remarks/>
        Counter,
        
        /// <remarks/>
        Choice,
        
        /// <remarks/>
        Lookup,
        
        /// <remarks/>
        Boolean,
        
        /// <remarks/>
        Number,
        
        /// <remarks/>
        Currency,
        
        /// <remarks/>
        URL,
        
        /// <remarks/>
        Computed,
        
        /// <remarks/>
        Threading,
        
        /// <remarks/>
        Guid,
        
        /// <remarks/>
        MultiChoice,
        
        /// <remarks/>
        GridChoice,
        
        /// <remarks/>
        Calculated,
        
        /// <remarks/>
        File,
        
        /// <remarks/>
        Attachments,
        
        /// <remarks/>
        User,
        
        /// <remarks/>
        Recurrence,
        
        /// <remarks/>
        CrossProjectLink,
        
        /// <remarks/>
        ModStat,
        
        /// <remarks/>
        Error,
        
        /// <remarks/>
        ContentTypeId,
        
        /// <remarks/>
        PageSeparator,
        
        /// <remarks/>
        ThreadIndex,
        
        /// <remarks/>
        WorkflowStatus,
        
        /// <remarks/>
        AllDayEvent,
        
        /// <remarks/>
        WorkflowEventType,
        
        /// <remarks/>
        MaxItems,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class NWContextData : NWContextKey {
        
        private ContextDataOptions optionsField;
        
        private string dataTypeDisplayResourceKeyField;
        
        private object dataField;
        
        /// <remarks/>
        public ContextDataOptions Options {
            get {
                return this.optionsField;
            }
            set {
                this.optionsField = value;
            }
        }
        
        /// <remarks/>
        public string DataTypeDisplayResourceKey {
            get {
                return this.dataTypeDisplayResourceKeyField;
            }
            set {
                this.dataTypeDisplayResourceKeyField = value;
            }
        }
        
        /// <remarks/>
        public object Data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public enum ContextDataOptions {
        
        /// <remarks/>
        None = 1,
        
        /// <remarks/>
        DatesInIso8601Format = 2,
        
        /// <remarks/>
        BooleanInCamlFormat = 4,
        
        /// <remarks/>
        BooleanInXmlFormat = 8,
        
        /// <remarks/>
        HtmlEncodeStrings = 16,
        
        /// <remarks/>
        SqlFriendly = 32,
        
        /// <remarks/>
        UnformattedNumbers = 64,
        
        /// <remarks/>
        RetainCollections = 128,
        
        /// <remarks/>
        RetainInfoPathPersonXml = 256,
        
        /// <remarks/>
        PeopleAsSPId = 512,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class VerboseLog {
        
        private string machineNameField;
        
        private string processNameField;
        
        private string nWVersionField;
        
        private string sPVersionField;
        
        private NWContextData[] contextDataField;
        
        /// <remarks/>
        public string MachineName {
            get {
                return this.machineNameField;
            }
            set {
                this.machineNameField = value;
            }
        }
        
        /// <remarks/>
        public string ProcessName {
            get {
                return this.processNameField;
            }
            set {
                this.processNameField = value;
            }
        }
        
        /// <remarks/>
        public string NWVersion {
            get {
                return this.nWVersionField;
            }
            set {
                this.nWVersionField = value;
            }
        }
        
        /// <remarks/>
        public string SPVersion {
            get {
                return this.sPVersionField;
            }
            set {
                this.sPVersionField = value;
            }
        }
        
        /// <remarks/>
        public NWContextData[] ContextData {
            get {
                return this.contextDataField;
            }
            set {
                this.contextDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class ActivityLogInfo {
        
        private VerboseLog beforePropertiesField;
        
        private VerboseLog afterPropertiesField;
        
        private System.DateTime startTimeField;
        
        private string startTimeShortField;
        
        private string startTimeLongField;
        
        private string startDateShortField;
        
        private string startDateLongField;
        
        private System.DateTime endTimeField;
        
        private string endTimeShortField;
        
        private string endTimeLongField;
        
        private string endDateLongField;
        
        private string activityTitleField;
        
        private int sequenceIdField;
        
        private long progressIdField;
        
        /// <remarks/>
        public VerboseLog BeforeProperties {
            get {
                return this.beforePropertiesField;
            }
            set {
                this.beforePropertiesField = value;
            }
        }
        
        /// <remarks/>
        public VerboseLog AfterProperties {
            get {
                return this.afterPropertiesField;
            }
            set {
                this.afterPropertiesField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartTime {
            get {
                return this.startTimeField;
            }
            set {
                this.startTimeField = value;
            }
        }
        
        /// <remarks/>
        public string StartTimeShort {
            get {
                return this.startTimeShortField;
            }
            set {
                this.startTimeShortField = value;
            }
        }
        
        /// <remarks/>
        public string StartTimeLong {
            get {
                return this.startTimeLongField;
            }
            set {
                this.startTimeLongField = value;
            }
        }
        
        /// <remarks/>
        public string StartDateShort {
            get {
                return this.startDateShortField;
            }
            set {
                this.startDateShortField = value;
            }
        }
        
        /// <remarks/>
        public string StartDateLong {
            get {
                return this.startDateLongField;
            }
            set {
                this.startDateLongField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndTime {
            get {
                return this.endTimeField;
            }
            set {
                this.endTimeField = value;
            }
        }
        
        /// <remarks/>
        public string EndTimeShort {
            get {
                return this.endTimeShortField;
            }
            set {
                this.endTimeShortField = value;
            }
        }
        
        /// <remarks/>
        public string EndTimeLong {
            get {
                return this.endTimeLongField;
            }
            set {
                this.endTimeLongField = value;
            }
        }
        
        /// <remarks/>
        public string EndDateLong {
            get {
                return this.endDateLongField;
            }
            set {
                this.endDateLongField = value;
            }
        }
        
        /// <remarks/>
        public string ActivityTitle {
            get {
                return this.activityTitleField;
            }
            set {
                this.activityTitleField = value;
            }
        }
        
        /// <remarks/>
        public int SequenceId {
            get {
                return this.sequenceIdField;
            }
            set {
                this.sequenceIdField = value;
            }
        }
        
        /// <remarks/>
        public long ProgressId {
            get {
                return this.progressIdField;
            }
            set {
                this.progressIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class WorkflowLog {
        
        private string workflowNameField;
        
        private SPWorkflowState internalStateField;
        
        private System.DateTime startDateField;
        
        private string startTimeShortField;
        
        private string startTimeLongField;
        
        private string startDateShortField;
        
        private string startDateLongField;
        
        private System.DateTime lastModifiedDateField;
        
        private string lastModifiedTimeShortField;
        
        private string lastModifiedTimeLongField;
        
        private string lastModifiedDateShortField;
        
        private string lastModifiedDateLongField;
        
        private System.Guid workflowInstanceIdField;
        
        private ActivityLogInfo[] activitiesField;
        
        private HumanTaskLogInfo[] humanTasksField;
        
        private System.Data.DataTable workflowHistoryField;
        
        /// <remarks/>
        public string WorkflowName {
            get {
                return this.workflowNameField;
            }
            set {
                this.workflowNameField = value;
            }
        }
        
        /// <remarks/>
        public SPWorkflowState InternalState {
            get {
                return this.internalStateField;
            }
            set {
                this.internalStateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        public string StartTimeShort {
            get {
                return this.startTimeShortField;
            }
            set {
                this.startTimeShortField = value;
            }
        }
        
        /// <remarks/>
        public string StartTimeLong {
            get {
                return this.startTimeLongField;
            }
            set {
                this.startTimeLongField = value;
            }
        }
        
        /// <remarks/>
        public string StartDateShort {
            get {
                return this.startDateShortField;
            }
            set {
                this.startDateShortField = value;
            }
        }
        
        /// <remarks/>
        public string StartDateLong {
            get {
                return this.startDateLongField;
            }
            set {
                this.startDateLongField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastModifiedDate {
            get {
                return this.lastModifiedDateField;
            }
            set {
                this.lastModifiedDateField = value;
            }
        }
        
        /// <remarks/>
        public string LastModifiedTimeShort {
            get {
                return this.lastModifiedTimeShortField;
            }
            set {
                this.lastModifiedTimeShortField = value;
            }
        }
        
        /// <remarks/>
        public string LastModifiedTimeLong {
            get {
                return this.lastModifiedTimeLongField;
            }
            set {
                this.lastModifiedTimeLongField = value;
            }
        }
        
        /// <remarks/>
        public string LastModifiedDateShort {
            get {
                return this.lastModifiedDateShortField;
            }
            set {
                this.lastModifiedDateShortField = value;
            }
        }
        
        /// <remarks/>
        public string LastModifiedDateLong {
            get {
                return this.lastModifiedDateLongField;
            }
            set {
                this.lastModifiedDateLongField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid WorkflowInstanceId {
            get {
                return this.workflowInstanceIdField;
            }
            set {
                this.workflowInstanceIdField = value;
            }
        }
        
        /// <remarks/>
        public ActivityLogInfo[] Activities {
            get {
                return this.activitiesField;
            }
            set {
                this.activitiesField = value;
            }
        }
        
        /// <remarks/>
        public HumanTaskLogInfo[] HumanTasks {
            get {
                return this.humanTasksField;
            }
            set {
                this.humanTasksField = value;
            }
        }
        
        /// <remarks/>
        public System.Data.DataTable WorkflowHistory {
            get {
                return this.workflowHistoryField;
            }
            set {
                this.workflowHistoryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public enum SPWorkflowState {
        
        /// <remarks/>
        None = 1,
        
        /// <remarks/>
        Locked = 2,
        
        /// <remarks/>
        Running = 4,
        
        /// <remarks/>
        Completed = 8,
        
        /// <remarks/>
        Cancelled = 16,
        
        /// <remarks/>
        Expiring = 32,
        
        /// <remarks/>
        Expired = 64,
        
        /// <remarks/>
        Faulting = 128,
        
        /// <remarks/>
        Terminated = 256,
        
        /// <remarks/>
        Suspended = 512,
        
        /// <remarks/>
        Orphaned = 1024,
        
        /// <remarks/>
        HasNewEvents = 2048,
        
        /// <remarks/>
        NotStarted = 4096,
        
        /// <remarks/>
        All = 8192,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class User {
        
        private string sipAddressField;
        
        private string otherEmailAddressField;
        
        private string userIDField;
        
        private string displayNameField;
        
        private bool isDomainGroupField;
        
        private bool isSPGroupField;
        
        private bool isUserField;
        
        /// <remarks/>
        public string SipAddress {
            get {
                return this.sipAddressField;
            }
            set {
                this.sipAddressField = value;
            }
        }
        
        /// <remarks/>
        public string OtherEmailAddress {
            get {
                return this.otherEmailAddressField;
            }
            set {
                this.otherEmailAddressField = value;
            }
        }
        
        /// <remarks/>
        public string UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDomainGroup {
            get {
                return this.isDomainGroupField;
            }
            set {
                this.isDomainGroupField = value;
            }
        }
        
        /// <remarks/>
        public bool IsSPGroup {
            get {
                return this.isSPGroupField;
            }
            set {
                this.isSPGroupField = value;
            }
        }
        
        /// <remarks/>
        public bool IsUser {
            get {
                return this.isUserField;
            }
            set {
                this.isUserField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class UserTask {
        
        private int sharePointTaskIdField;
        
        private long humanWorkflowIDField;
        
        private User assignedToField;
        
        private string commentsField;
        
        private System.DateTime entryTimeField;
        
        private string workflowNameField;
        
        private System.Guid workflowInstaceIdField;
        
        private string taskNameField;
        
        private TaskType taskTypeField;
        
        /// <remarks/>
        public int SharePointTaskId {
            get {
                return this.sharePointTaskIdField;
            }
            set {
                this.sharePointTaskIdField = value;
            }
        }
        
        /// <remarks/>
        public long HumanWorkflowID {
            get {
                return this.humanWorkflowIDField;
            }
            set {
                this.humanWorkflowIDField = value;
            }
        }
        
        /// <remarks/>
        public User AssignedTo {
            get {
                return this.assignedToField;
            }
            set {
                this.assignedToField = value;
            }
        }
        
        /// <remarks/>
        public string Comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EntryTime {
            get {
                return this.entryTimeField;
            }
            set {
                this.entryTimeField = value;
            }
        }
        
        /// <remarks/>
        public string WorkflowName {
            get {
                return this.workflowNameField;
            }
            set {
                this.workflowNameField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid WorkflowInstaceId {
            get {
                return this.workflowInstaceIdField;
            }
            set {
                this.workflowInstaceIdField = value;
            }
        }
        
        /// <remarks/>
        public string TaskName {
            get {
                return this.taskNameField;
            }
            set {
                this.taskNameField = value;
            }
        }
        
        /// <remarks/>
        public TaskType TaskType {
            get {
                return this.taskTypeField;
            }
            set {
                this.taskTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public enum TaskType {
        
        /// <remarks/>
        Approval,
        
        /// <remarks/>
        Review,
        
        /// <remarks/>
        CollectData,
        
        /// <remarks/>
        Todo,
        
        /// <remarks/>
        MultiOutcome,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class PendingMyApprovalLight {
        
        private string currentActivityTitleField;
        
        private int idleTimeMinutesField;
        
        private int expectedDurationField;
        
        private string itemTitleField;
        
        private string itemFilenameField;
        
        private string workflowNameField;
        
        private string itemUrlField;
        
        private string progressUrlField;
        
        private string approvalUrlField;
        
        private System.DateTime entryTimeField;
        
        /// <remarks/>
        public string CurrentActivityTitle {
            get {
                return this.currentActivityTitleField;
            }
            set {
                this.currentActivityTitleField = value;
            }
        }
        
        /// <remarks/>
        public int IdleTimeMinutes {
            get {
                return this.idleTimeMinutesField;
            }
            set {
                this.idleTimeMinutesField = value;
            }
        }
        
        /// <remarks/>
        public int ExpectedDuration {
            get {
                return this.expectedDurationField;
            }
            set {
                this.expectedDurationField = value;
            }
        }
        
        /// <remarks/>
        public string ItemTitle {
            get {
                return this.itemTitleField;
            }
            set {
                this.itemTitleField = value;
            }
        }
        
        /// <remarks/>
        public string ItemFilename {
            get {
                return this.itemFilenameField;
            }
            set {
                this.itemFilenameField = value;
            }
        }
        
        /// <remarks/>
        public string WorkflowName {
            get {
                return this.workflowNameField;
            }
            set {
                this.workflowNameField = value;
            }
        }
        
        /// <remarks/>
        public string ItemUrl {
            get {
                return this.itemUrlField;
            }
            set {
                this.itemUrlField = value;
            }
        }
        
        /// <remarks/>
        public string ProgressUrl {
            get {
                return this.progressUrlField;
            }
            set {
                this.progressUrlField = value;
            }
        }
        
        /// <remarks/>
        public string ApprovalUrl {
            get {
                return this.approvalUrlField;
            }
            set {
                this.approvalUrlField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EntryTime {
            get {
                return this.entryTimeField;
            }
            set {
                this.entryTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class ItemsPendingApproval {
        
        private PendingMyApprovalLight[] itemsField;
        
        private bool hasNewDataField;
        
        private string uniquenessInfoField;
        
        /// <remarks/>
        public PendingMyApprovalLight[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        /// <remarks/>
        public bool HasNewData {
            get {
                return this.hasNewDataField;
            }
            set {
                this.hasNewDataField = value;
            }
        }
        
        /// <remarks/>
        public string UniquenessInfo {
            get {
                return this.uniquenessInfoField;
            }
            set {
                this.uniquenessInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public enum NameInUseStatus {
        
        /// <remarks/>
        NameNotUsed,
        
        /// <remarks/>
        NameUsedInOtherList,
        
        /// <remarks/>
        NameUsedInThisList,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public enum ProcessTaskResponseResult {
        
        /// <remarks/>
        Success,
        
        /// <remarks/>
        CannotObtainLock,
        
        /// <remarks/>
        InvalidUser,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void WorkflowFormProductSelectedCompletedEventHandler(object sender, WorkflowFormProductSelectedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WorkflowFormProductSelectedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WorkflowFormProductSelectedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void CheckInFormsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void SaveWorkflowCompletedEventHandler(object sender, SaveWorkflowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveWorkflowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveWorkflowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkflowMetaData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkflowMetaData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void WorkflowExistsCompletedEventHandler(object sender, WorkflowExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WorkflowExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WorkflowExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NameInUseStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NameInUseStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void SnippetExistsCompletedEventHandler(object sender, SnippetExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SnippetExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SnippetExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void TemplateExistsCompletedEventHandler(object sender, TemplateExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TemplateExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TemplateExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void SaveSnippetCompletedEventHandler(object sender, SaveSnippetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveSnippetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveSnippetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void SaveTemplateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void SaveTemplate2CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void PublishWorkflowCompletedEventHandler(object sender, PublishWorkflowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublishWorkflowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PublishWorkflowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkflowMetaData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkflowMetaData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void TerminateWorkflowCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void TerminateWorkflowByNameCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void TerminateWorkflowByNameForListItemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void CheckGlobalReuseStatusCompletedEventHandler(object sender, CheckGlobalReuseStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckGlobalReuseStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckGlobalReuseStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void DeleteWorkflowCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void DeleteSnippetCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void HideTaskForApproverCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void HideWorkflowCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void StartWorkflowCompletedEventHandler(object sender, StartWorkflowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartWorkflowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartWorkflowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void StartWorkflowOnListItemCompletedEventHandler(object sender, StartWorkflowOnListItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartWorkflowOnListItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartWorkflowOnListItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void StartSiteWorkflowCompletedEventHandler(object sender, StartSiteWorkflowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartSiteWorkflowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartSiteWorkflowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetItemsPendingMyApprovalCompletedEventHandler(object sender, GetItemsPendingMyApprovalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetItemsPendingMyApprovalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetItemsPendingMyApprovalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ItemsPendingApproval Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ItemsPendingApproval)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetRunningWorkflowTasksForCurrentUserCompletedEventHandler(object sender, GetRunningWorkflowTasksForCurrentUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRunningWorkflowTasksForCurrentUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRunningWorkflowTasksForCurrentUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserTask[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserTask[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetRunningWorkflowTasksForCurrentUserForListItemCompletedEventHandler(object sender, GetRunningWorkflowTasksForCurrentUserForListItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRunningWorkflowTasksForCurrentUserForListItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRunningWorkflowTasksForCurrentUserForListItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserTask[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserTask[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetRunningWorkflowTasksCompletedEventHandler(object sender, GetRunningWorkflowTasksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRunningWorkflowTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRunningWorkflowTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserTask[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserTask[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetRunningWorkflowTasksForListItemCompletedEventHandler(object sender, GetRunningWorkflowTasksForListItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRunningWorkflowTasksForListItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRunningWorkflowTasksForListItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserTask[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserTask[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetRunningWorkflowTasksCollectionCompletedEventHandler(object sender, GetRunningWorkflowTasksCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRunningWorkflowTasksCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRunningWorkflowTasksCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserTask[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserTask[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void ProcessTaskResponseCompletedEventHandler(object sender, ProcessTaskResponseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessTaskResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessTaskResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void ProcessTaskResponse2CompletedEventHandler(object sender, ProcessTaskResponse2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessTaskResponse2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessTaskResponse2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void ProcessTaskResponse3CompletedEventHandler(object sender, ProcessTaskResponse3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessTaskResponse3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessTaskResponse3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProcessTaskResponseResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProcessTaskResponseResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void ProcessFlexiTaskResponseCompletedEventHandler(object sender, ProcessFlexiTaskResponseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessFlexiTaskResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessFlexiTaskResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void ProcessFlexiTaskResponse2CompletedEventHandler(object sender, ProcessFlexiTaskResponse2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessFlexiTaskResponse2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessFlexiTaskResponse2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProcessTaskResponseResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProcessTaskResponseResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetOutcomesForFlexiTaskCompletedEventHandler(object sender, GetOutcomesForFlexiTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOutcomesForFlexiTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOutcomesForFlexiTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ConfiguredOutcome[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ConfiguredOutcome[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void DelegateTaskCompletedEventHandler(object sender, DelegateTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DelegateTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DelegateTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetWorkflowHistoryCompletedEventHandler(object sender, GetWorkflowHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkflowHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorkflowHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkflowLog[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkflowLog[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetWorkflowHistoryForListItemCompletedEventHandler(object sender, GetWorkflowHistoryForListItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkflowHistoryForListItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorkflowHistoryForListItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkflowLog[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkflowLog[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void QueryForMessagesCompletedEventHandler(object sender, QueryForMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryForMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryForMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MessageBoxItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MessageBoxItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void PublishFromNWFXmlCompletedEventHandler(object sender, PublishFromNWFXmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublishFromNWFXmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PublishFromNWFXmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void PublishFromNWFXmlSkipValidationCompletedEventHandler(object sender, PublishFromNWFXmlSkipValidationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublishFromNWFXmlSkipValidationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PublishFromNWFXmlSkipValidationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void PublishFromNWFXmlNoOverwriteCompletedEventHandler(object sender, PublishFromNWFXmlNoOverwriteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublishFromNWFXmlNoOverwriteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PublishFromNWFXmlNoOverwriteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void PublishFromNWFXmlSkipValidationNoOverwriteCompletedEventHandler(object sender, PublishFromNWFXmlSkipValidationNoOverwriteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublishFromNWFXmlSkipValidationNoOverwriteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PublishFromNWFXmlSkipValidationNoOverwriteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void PublishFromNWFCompletedEventHandler(object sender, PublishFromNWFCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublishFromNWFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PublishFromNWFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void PublishFromNWFNoOverwriteCompletedEventHandler(object sender, PublishFromNWFNoOverwriteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublishFromNWFNoOverwriteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PublishFromNWFNoOverwriteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void PublishFromNWFSkipValidationCompletedEventHandler(object sender, PublishFromNWFSkipValidationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublishFromNWFSkipValidationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PublishFromNWFSkipValidationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void PublishFromNWFSkipValidationNoOverwriteCompletedEventHandler(object sender, PublishFromNWFSkipValidationNoOverwriteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublishFromNWFSkipValidationNoOverwriteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PublishFromNWFSkipValidationNoOverwriteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void SaveFromNWFXmlCompletedEventHandler(object sender, SaveFromNWFXmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveFromNWFXmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveFromNWFXmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkflowMetaData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkflowMetaData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void SaveFromNWFXmlNoOverwriteCompletedEventHandler(object sender, SaveFromNWFXmlNoOverwriteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveFromNWFXmlNoOverwriteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveFromNWFXmlNoOverwriteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkflowMetaData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkflowMetaData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void SaveFromNWFCompletedEventHandler(object sender, SaveFromNWFCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveFromNWFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveFromNWFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkflowMetaData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkflowMetaData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void SaveFromNWFNoOverwriteCompletedEventHandler(object sender, SaveFromNWFNoOverwriteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveFromNWFNoOverwriteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveFromNWFNoOverwriteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkflowMetaData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkflowMetaData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void AddWorkflowScheduleOnListItemCompletedEventHandler(object sender, AddWorkflowScheduleOnListItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddWorkflowScheduleOnListItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddWorkflowScheduleOnListItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void AddWorkflowScheduleCompletedEventHandler(object sender, AddWorkflowScheduleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddWorkflowScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddWorkflowScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void RemoveWorkflowScheduleOnListItemCompletedEventHandler(object sender, RemoveWorkflowScheduleOnListItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveWorkflowScheduleOnListItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveWorkflowScheduleOnListItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void RemoveWorkflowScheduleCompletedEventHandler(object sender, RemoveWorkflowScheduleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveWorkflowScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveWorkflowScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void DelegateAllTasksCompletedEventHandler(object sender, DelegateAllTasksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DelegateAllTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DelegateAllTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void AddLongTermDelegationRuleCompletedEventHandler(object sender, AddLongTermDelegationRuleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddLongTermDelegationRuleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddLongTermDelegationRuleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void DeleteLongTermDelegationRuleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void FixWorkflowsInSiteFromTemplateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void ExportWorkflowCompletedEventHandler(object sender, ExportWorkflowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExportWorkflowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExportWorkflowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetTaskStubsForCurrentUserCompletedEventHandler(object sender, GetTaskStubsForCurrentUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTaskStubsForCurrentUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskStubsForCurrentUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaskStub[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaskStub[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetTaskDetailsUsingStubCompletedEventHandler(object sender, GetTaskDetailsUsingStubCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTaskDetailsUsingStubCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskDetailsUsingStubCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkflowTaskDetail Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkflowTaskDetail)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void ProcessTaskResponseUsingTokenCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetFoldersCompletedEventHandler(object sender, GetFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Folder[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Folder[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetListContentTypesCompletedEventHandler(object sender, GetListContentTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListContentTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListContentTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ContentType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ContentType[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591